--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -1,20 +1,35 @@
 package net.minecraft.world;
 
+import carpet.helpers.TickSpeed;
+import carpet.helpers.UpdateSuppressionException;
+import carpet.logging.LoggerRegistry;
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.EventType;
+import carpet.logging.microtiming.enums.BlockUpdateType;
+import carpet.logging.microtiming.enums.TickStage;
+import carpet.logging.microtiming.tickstages.EntityTickStageExtra;
+import carpet.logging.microtiming.tickstages.LiteralTickStageExtra;
+import carpet.logging.microtiming.tickstages.TileEntityTickStageExtra;
+import carpet.logging.threadstone.ThreadstoneLogger;
+import carpet.settings.CarpetSettings;
+import carpet.utils.CarpetProfiler;
+import carpet.utils.LightingEngine;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
+
+import java.util.*;
 import java.util.function.BooleanSupplier;
+import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import me.jellysquid.mods.lithium.LithiumConfig;
+import me.jellysquid.mods.lithium.common.util.collections.HashedReferenceList;
+import me.jellysquid.mods.lithium.common.util.collections.TileEntityList;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -65,6 +80,7 @@
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.dimension.Dimension;
+import net.minecraft.world.dimension.DimensionType;
 import net.minecraft.world.gen.Heightmap;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.SessionLockException;
@@ -72,20 +88,33 @@
 import net.minecraft.world.storage.WorldSavedDataStorage;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import redstone.multimeter.common.TickTask;
+import redstone.multimeter.interfaces.TickTaskExecutor;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class World implements IEntityReader, IWorld, IWorldReader, AutoCloseable
+public abstract class World implements IEntityReader, IWorld, IWorldReader, AutoCloseable, TickTaskExecutor /* RSMM */
 {
     protected static final Logger LOGGER = LogManager.getLogger();
     private static final EnumFacing[] FACING_VALUES = EnumFacing.values();
     private int seaLevel = 63;
     public final List<Entity> loadedEntityList = Lists.newArrayList();
     protected final List<Entity> unloadedEntityList = Lists.newArrayList();
-    public final List<TileEntity> loadedTileEntityList = Lists.newArrayList();
-    public final List<TileEntity> tickableTileEntities = Lists.newArrayList();
-    private final List<TileEntity> addedTileEntityList = Lists.newArrayList();
-    private final List<TileEntity> tileEntitiesToBeRemoved = Lists.newArrayList();
+
+    // Lithium world.block_entity_ticking
+    public final List<TileEntity> loadedTileEntityList = LithiumConfig.WORLD_BLOCK_ENTITY_TICKING ?
+            new TileEntityList(Lists.newArrayList(), false) :
+            Lists.newArrayList();
+    public final List<TileEntity> tickableTileEntities = Lists.newArrayList();  // vanilla
+    private final List<TileEntity> addedTileEntityList = LithiumConfig.WORLD_BLOCK_ENTITY_TICKING ?
+            new TileEntityList(Lists.newArrayList(), true) :
+            Lists.newArrayList();
+    private final List<TileEntity> tileEntitiesToBeRemoved = LithiumConfig.WORLD_BLOCK_ENTITY_TICKING ?
+            new HashedReferenceList<>(Lists.newArrayList()) :
+            Lists.newArrayList();
+    // Lithium world.block_entity_ticking ends
+
     public final List<EntityPlayer> playerEntities = Lists.newArrayList();
     public final List<Entity> weatherEffects = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap<>();
@@ -116,6 +145,16 @@
     private final WorldBorder worldBorder;
     int[] lightUpdateBlockList = new int['\u8000'];
 
+    private final LightingEngine lightingEngine; // [TISCM] Newlight
+    
+    public LightingEngine getLightingEngine()
+    {
+        return lightingEngine;
+    }
+
+    // TISCM merged session lock check
+    public boolean skipSessionLockCheck = false;
+
     protected World(ISaveHandler p_i49813_1_, @Nullable WorldSavedDataStorage p_i49813_2_, WorldInfo p_i49813_3_, Dimension p_i49813_4_, Profiler p_i49813_5_, boolean p_i49813_6_)
     {
         this.saveHandler = p_i49813_1_;
@@ -125,6 +164,8 @@
         this.dimension = p_i49813_4_;
         this.isRemote = p_i49813_6_;
         this.worldBorder = p_i49813_4_.createWorldBorder();
+        
+        this.lightingEngine = new LightingEngine(this); // [TISCM] Newlight
     }
 
     public Biome getBiome(BlockPos pos)
@@ -224,8 +265,25 @@
         }
     }
 
+    // TISCM Micro Timing logger wrapped method
     public boolean setBlockState(BlockPos pos, IBlockState newState, int flags)
     {
+        IBlockState oldState = null;
+        if (MicroTimingLoggerManager.isLoggerActivated())
+        {
+            oldState = this.getBlockState(pos);
+            MicroTimingLoggerManager.onSetBlockState(this, pos, oldState, newState, null, flags, EventType.ACTION_START);
+        }
+        boolean returnValue = this.setBlockState_vanilla(pos, newState, flags);
+        if (MicroTimingLoggerManager.isLoggerActivated() && oldState != null)
+        {
+            MicroTimingLoggerManager.onSetBlockState(this, pos, oldState, newState, returnValue, flags, EventType.ACTION_END);
+        }
+        return returnValue;
+    }
+
+    private boolean setBlockState_vanilla(BlockPos pos, IBlockState newState, int flags)
+    {
         if (isOutsideBuildHeight(pos))
         {
             return false;
@@ -238,7 +296,7 @@
         {
             Chunk chunk = this.getChunk(pos);
             Block block = newState.getBlock();
-            IBlockState iblockstate = chunk.setBlockState(pos, newState, (flags & 64) != 0);
+            IBlockState iblockstate = chunk.setBlockState(pos, newState, (flags & 64) != 0, (flags & 1024) != 0);
 
             if (iblockstate == null)
             {
@@ -261,7 +319,7 @@
                     {
                         this.markBlockRangeForRenderUpdate(pos, pos);
                     }
-
+                    
                     if ((flags & 2) != 0 && (!this.isRemote || (flags & 4) == 0) && chunk.isPopulated())
                     {
                         this.notifyBlockUpdate(pos, iblockstate, newState, flags);
@@ -277,7 +335,9 @@
                         }
                     }
 
-                    if ((flags & 16) == 0)
+                    //fillUpdates added case
+                    // if ((flags & 16) == 0)
+                    if (((flags & 16) == 0) && ((flags & 1024) == 0))
                     {
                         int i = flags & -2;
                         iblockstate.updateDiagonalNeighbors(this, pos, i);
@@ -372,19 +432,22 @@
             this.eventListeners.get(i).markBlockRangeForRenderUpdate(x1, y1, z1, x2, y2, z2);
         }
     }
-
     public void notifyNeighborsOfStateChange(BlockPos pos, Block blockIn)
     {
+        MicroTimingLoggerManager.onBlockUpdate(this, pos, blockIn, BlockUpdateType.BLOCK_UPDATE, null, EventType.ACTION_START); // TISCM Micro Timing logger
         this.neighborChanged(pos.west(), blockIn, pos);
         this.neighborChanged(pos.east(), blockIn, pos);
         this.neighborChanged(pos.down(), blockIn, pos);
         this.neighborChanged(pos.up(), blockIn, pos);
         this.neighborChanged(pos.north(), blockIn, pos);
         this.neighborChanged(pos.south(), blockIn, pos);
+        MicroTimingLoggerManager.onBlockUpdate(this, pos, blockIn, BlockUpdateType.BLOCK_UPDATE, null, EventType.ACTION_END); // TISCM Micro Timing logger
     }
 
     public void notifyNeighborsOfStateExcept(BlockPos pos, Block blockType, EnumFacing skipSide)
     {
+        MicroTimingLoggerManager.onBlockUpdate(this, pos, blockType, BlockUpdateType.BLOCK_UPDATE_EXCEPT, skipSide, EventType.ACTION_START); // TISCM Micro Timing logger
+
         if (skipSide != EnumFacing.WEST)
         {
             this.neighborChanged(pos.west(), blockType, pos);
@@ -414,18 +477,34 @@
         {
             this.neighborChanged(pos.south(), blockType, pos);
         }
-    }
 
+        MicroTimingLoggerManager.onBlockUpdate(this, pos, blockType, BlockUpdateType.BLOCK_UPDATE_EXCEPT, skipSide, EventType.ACTION_END); // TISCM Micro Timing logger
+    }
     public void neighborChanged(BlockPos pos, Block blockIn, BlockPos fromPos)
     {
+    	if (CarpetSettings.totallyNoBlockUpdate)
+    	{
+    		return;
+    	}
+
         if (!this.isRemote)
         {
             IBlockState iblockstate = this.getBlockState(pos);
 
+             // Update suppression fix
             try
             {
+                onBlockUpdate(pos, iblockstate);
                 iblockstate.neighborChanged(this, pos, blockIn, fromPos);
             }
+            catch (StackOverflowError e)
+            {
+                throw new UpdateSuppressionException(this, pos);
+            }
+            catch (UpdateSuppressionException e)
+            {
+                throw e;
+            }
             catch (Throwable throwable)
             {
                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception while updating neighbours");
@@ -1199,13 +1278,23 @@
     {
         this.profiler.startSection("entities");
         this.profiler.startSection("global");
+        /// CM profiler
+        DimensionType world_name = this.dimension.getType();
+        CarpetProfiler.ProfilerToken tok_entities = CarpetProfiler.start_section_concurrent(world_name, "Entities", this.isRemote);
+        // end
 
+        MicroTimingLoggerManager.setTickStage(this, TickStage.ENTITY); // TISCM Micro Timing logger
+        startTickTask(TickTask.GLOBAL_ENTITIES); // RSMM
+        int entityOrderCounter = 0;  // TISCM Micro Timing logger
+
         for (int i = 0; i < this.weatherEffects.size(); ++i)
         {
             Entity entity = this.weatherEffects.get(i);
 
             try
             {
+                MicroTimingLoggerManager.setTickStageExtra(this, new EntityTickStageExtra(entity, entityOrderCounter++));  // TISCM Micro Timing logger
+                onEntityTick(entity); // RSMM
                 ++entity.ticksExisted;
                 entity.tick();
             }
@@ -1233,6 +1322,7 @@
         }
 
         this.profiler.endStartSection("remove");
+        MicroTimingLoggerManager.setTickStageExtra(this, LiteralTickStageExtra.ENTITY_REMOVING); // TISCM Micro Timing logger
         this.loadedEntityList.removeAll(this.unloadedEntityList);
 
         for (int k = 0; k < this.unloadedEntityList.size(); ++k)
@@ -1253,12 +1343,15 @@
         }
 
         this.unloadedEntityList.clear();
+        MicroTimingLoggerManager.setTickStageExtra(this, LiteralTickStageExtra.ENTITY_PLAYER);  // TISCM Micro Timing logger
         this.tickPlayers();
         this.profiler.endStartSection("regular");
+        swapTickTask(TickTask.REGULAR_ENTITIES); // RSMM
 
         for (int i1 = 0; i1 < this.loadedEntityList.size(); ++i1)
         {
             Entity entity2 = this.loadedEntityList.get(i1);
+            CarpetProfiler.ProfilerToken tok = CarpetProfiler.start_entity_section(world_name, entity2);
             Entity entity3 = entity2.getRidingEntity();
 
             if (entity3 != null)
@@ -1273,8 +1366,10 @@
 
             this.profiler.startSection("tick");
 
-            if (!entity2.removed && !(entity2 instanceof EntityPlayerMP))
+            // [CM] Tick Freeze
+            if (!entity2.removed && !(entity2 instanceof EntityPlayerMP) && (TickSpeed.process_entities || entity2 instanceof EntityPlayer))
             {
+                MicroTimingLoggerManager.setTickStageExtra(this, new EntityTickStageExtra(entity2, entityOrderCounter++));  // TISCM Micro Timing logger
                 try
                 {
                     this.tickEntity(entity2);
@@ -1304,11 +1399,18 @@
                 this.loadedEntityList.remove(i1--);
                 this.onEntityRemoved(entity2);
             }
+            CarpetProfiler.end_current_entity_section(tok);
 
             this.profiler.endSection();
         }
+        CarpetProfiler.end_current_section_concurrent(tok_entities);
+        tok_entities = CarpetProfiler.start_section_concurrent(world_name, "Tile Entities", this.isRemote);
 
+
         this.profiler.endStartSection("blockEntities");
+        MicroTimingLoggerManager.setTickStageExtra(this, null); // TISCM Micro Timing logger
+        MicroTimingLoggerManager.setTickStage(this, TickStage.TILE_ENTITY); // TISCM Micro Timing logger
+        swapTickTask(TickTask.BLOCK_ENTITIES); // RSMM
 
         if (!this.tileEntitiesToBeRemoved.isEmpty())
         {
@@ -1316,19 +1418,22 @@
             this.loadedTileEntityList.removeAll(this.tileEntitiesToBeRemoved);
             this.tileEntitiesToBeRemoved.clear();
         }
+        int tickCounter = 0;  // TISCM Micro Timing logger
 
         this.processingLoadedTiles = true;
         Iterator<TileEntity> iterator = this.tickableTileEntities.iterator();
-
         while (iterator.hasNext())
         {
             TileEntity tileentity = iterator.next();
+            CarpetProfiler.ProfilerToken tok = CarpetProfiler.start_tileentity_section(world_name, tileentity);
 
+
             if (!tileentity.isRemoved() && tileentity.hasWorld())
             {
                 BlockPos blockpos = tileentity.getPos();
 
-                if (this.isBlockLoaded(blockpos) && this.worldBorder.contains(blockpos))
+                // [CM extra check to process entities]
+                if (this.isBlockLoaded(blockpos) && this.worldBorder.contains(blockpos) && TickSpeed.process_entities)
                 {
                     try
                     {
@@ -1336,6 +1441,8 @@
                         {
                             return String.valueOf((Object)TileEntityType.getId(tileentity.getType()));
                         });
+                        MicroTimingLoggerManager.setTickStageExtra(this, new TileEntityTickStageExtra(tileentity, tickCounter++));  // TISCM Micro Timing logger
+                        onBlockEntityTick(tileentity); // RSMM
                         ((ITickable)tileentity).tick();
                         this.profiler.endSection();
                     }
@@ -1359,13 +1466,23 @@
                     this.getChunk(tileentity.getPos()).removeTileEntity(tileentity.getPos());
                 }
             }
+            CarpetProfiler.end_current_entity_section(tok);
         }
 
         this.processingLoadedTiles = false;
         this.profiler.endStartSection("pendingBlockEntities");
+        MicroTimingLoggerManager.setTickStageExtra(this, LiteralTickStageExtra.ADD_PENDING_BLOCK_ENTITIES); // TISCM Micro Timing logger
 
-        if (!this.addedTileEntityList.isEmpty())
+        // Lithium world.block_entity_ticking
+        // We do not want the vanilla code for adding pending block entities to be ran. We'll inject later in
+        // postBlockEntityTick to use our optimized implementation.
+        if (LithiumConfig.WORLD_BLOCK_ENTITY_TICKING)
         {
+            this.postBlockEntityTick$lithium();
+        }
+        else
+        {
+            // vanilla
             for (int j1 = 0; j1 < this.addedTileEntityList.size(); ++j1)
             {
                 TileEntity tileentity1 = this.addedTileEntityList.get(j1);
@@ -1389,11 +1506,54 @@
 
             this.addedTileEntityList.clear();
         }
+        CarpetProfiler.end_current_section_concurrent(tok_entities);
 
         this.profiler.endSection();
         this.profiler.endSection();
+
+        MicroTimingLoggerManager.setTickStageExtra(this, null); // TISCM Micro Timing logger
+
+        endTickTask(); // RSMM
     }
 
+    private void postBlockEntityTick$lithium() {
+        Profiler profiler = this.profiler;
+        profiler.startSection("pendingBlockEntities$lithium");
+
+        // The usage of a for-index loop is invalid with our optimized implementation, so use an iterator here
+        // The overhead of this is essentially non-zero and doesn't matter in this code.
+        for (TileEntity tileEntity : this.addedTileEntityList) {
+            if (tileEntity.isRemoved()) {
+                continue;
+            }
+
+            // Try-add directly to avoid the double map lookup, helps speed things along
+            if (((TileEntityList)this.loadedTileEntityList).addIfAbsent(tileEntity)) {
+                //vanilla has an extra updateListeners(...) call on the client here, but the one below should be enough
+                if (tileEntity instanceof ITickable) {
+                    this.tickableTileEntities.add(tileEntity);
+                }
+
+                BlockPos pos = tileEntity.getPos();
+
+                // Use vanilla code instead since seems like 1.13.2 can't do that
+                // // Avoid the double chunk lookup (isLoaded followed by getChunk) by simply inlining getChunk call
+                // // pass this.isClient instead of false, so the updateListeners call is always executed on the client (like vanilla)
+                if (this.isBlockLoaded(pos))
+                {
+                    Chunk chunk = this.getChunk(pos);
+                    IBlockState iblockstate = chunk.getBlockState(pos);
+                    chunk.addTileEntity(pos, tileEntity);
+                    this.notifyBlockUpdate(pos, iblockstate, iblockstate, 3);
+                }
+            }
+        }
+
+        this.addedTileEntityList.clear();
+
+        profiler.endSection();
+    }
+
     protected void tickPlayers()
     {
     }
@@ -1413,7 +1573,7 @@
             IBlockState iblockstate = this.getBlockState(blockpos);
             this.notifyBlockUpdate(blockpos, iblockstate, iblockstate, 2);
         }
-
+        
         return flag;
     }
 
@@ -1471,6 +1631,7 @@
                 {
                     return IRegistry.ENTITY_TYPE.getKey(entityIn.getType()).toString();
                 });
+                onEntityTick(entityIn); // RSMM
                 entityIn.tick();
                 this.profiler.endSection();
             }
@@ -1514,7 +1675,8 @@
                 this.getChunk(entityIn.chunkCoordX, entityIn.chunkCoordZ).removeEntityAtIndex(entityIn, entityIn.chunkCoordY);
             }
 
-            if (!entityIn.setPositionNonDirty() && !this.isChunkLoaded(l, j1, true))
+            // [CM] Faster entities can move into unloaded chunks and can get stuck in memory lagging the server. This fixes it
+            if (!CarpetSettings.unloadedEntityFix && !entityIn.setPositionNonDirty() && !this.isChunkLoaded(l, j1, true))
             {
                 entityIn.addedToChunk = false;
             }
@@ -1834,6 +1996,14 @@
     @Nullable
     private TileEntity getPendingTileEntityAt(BlockPos pos)
     {
+        // Lithium world.block_entity_ticking
+        // Replace with direct lookup
+        if (LithiumConfig.WORLD_BLOCK_ENTITY_TICKING)
+        {
+            return ((TileEntityList)this.addedTileEntityList).getFirstNonRemovedTileEntityAtPosition(pos.toLong());
+        }
+
+        // vanilla
         for (int i = 0; i < this.addedTileEntityList.size(); ++i)
         {
             TileEntity tileentity = this.addedTileEntityList.get(i);
@@ -1856,16 +2026,26 @@
                 if (this.processingLoadedTiles)
                 {
                     tileEntityIn.setPos(pos);
-                    Iterator<TileEntity> iterator = this.addedTileEntityList.iterator();
 
-                    while (iterator.hasNext())
+                    // Lithium world.block_entity_ticking
+                    if (LithiumConfig.WORLD_BLOCK_ENTITY_TICKING)
                     {
-                        TileEntity tileentity = iterator.next();
+                        ((TileEntityList)this.addedTileEntityList).markRemovedAndRemoveAllAtPosition(pos);
+                    }
+                    else
+                    {
+                        // vanilla
+                        Iterator<TileEntity> iterator = this.addedTileEntityList.iterator();
 
-                        if (tileentity.getPos().equals(pos))
+                        while (iterator.hasNext())
                         {
-                            tileentity.remove();
-                            iterator.remove();
+                            TileEntity tileentity = iterator.next();
+
+                            if (tileentity.getPos().equals(pos))
+                            {
+                                tileentity.remove();
+                                iterator.remove();
+                            }
                         }
                     }
 
@@ -1948,8 +2128,11 @@
 
     public void tick(BooleanSupplier hasTimeLeft)
     {
+        startTickTask(TickTask.WORLD_BORDER); // RSMM
         this.worldBorder.tick();
+        swapTickTask(TickTask.WEATHER); // RSMM
         this.tickWeather();
+        endTickTask(); // RSMM
     }
 
     protected void calculateInitialWeather()
@@ -2149,6 +2332,13 @@
 
     public boolean checkLightFor(EnumLightType lightType, BlockPos pos)
     {
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+        {
+            this.getLightingEngine().scheduleLightUpdate(lightType, pos);
+            return true;
+        }
+        
         if (!this.isAreaLoaded(pos, 17, false))
         {
             return false;
@@ -2284,15 +2474,15 @@
         }
     }
 
-    public Stream<VoxelShape> getCollisionBoxes(@Nullable Entity movingEntity, VoxelShape area, VoxelShape entityShape, Set<Entity> entitiesToIgnore)
+    // Lithium shapes.specialized_shapes added entityAABB parameter
+    public Stream<VoxelShape> getCollisionBoxes(@Nullable Entity movingEntity, VoxelShape area, VoxelShape entityShape, Set<Entity> entitiesToIgnore, AxisAlignedBB entityAABB)
     {
-        Stream<VoxelShape> stream = IWorld.super.getCollisionBoxes(movingEntity, area, entityShape, entitiesToIgnore);
+        Stream<VoxelShape> stream = IWorld.super.getCollisionBoxes(movingEntity, area, entityShape, entitiesToIgnore, entityAABB);
         return movingEntity == null ? stream : Stream.concat(stream, this.getCollisionBoxes(movingEntity, area, entitiesToIgnore));
     }
 
-    public List<Entity> getEntitiesInAABBexcluding(@Nullable Entity entityIn, AxisAlignedBB boundingBox, @Nullable Predicate <? super Entity > predicate)
+    private void getEntitiesInAABBexcludingInner(@Nullable Entity entityIn, AxisAlignedBB boundingBox, @Nullable Predicate <? super Entity > predicate, Consumer<Chunk> consumer)
     {
-        List<Entity> list = Lists.newArrayList();
         int i = MathHelper.floor((boundingBox.minX - 2.0D) / 16.0D);
         int j = MathHelper.floor((boundingBox.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((boundingBox.minZ - 2.0D) / 16.0D);
@@ -2304,14 +2494,33 @@
             {
                 if (this.isChunkLoaded(i1, j1, true))
                 {
-                    this.getChunk(i1, j1).getEntitiesWithinAABBForEntity(entityIn, boundingBox, list, predicate);
+                    consumer.accept(this.getChunk(i1, j1));
                 }
             }
         }
+    }
 
+    // TISCM optimizedHardHitBoxEntityCollision preserves vanilla interface
+    public List<Entity> getEntitiesInAABBexcluding(@Nullable Entity entityIn, AxisAlignedBB boundingBox, @Nullable Predicate <? super Entity > predicate)
+    {
+        List<Entity> list = Lists.newArrayList();
+        this.getEntitiesInAABBexcludingInner(entityIn, boundingBox, predicate,
+                chunk -> chunk.getEntitiesWithinAABBForEntity(entityIn, boundingBox, list, predicate)
+        );
         return list;
     }
 
+    // TISCM optimizedHardHitBoxEntityCollision
+    @Override
+    public List<Entity> getHardHitBoxEntitiesWithinAABBForEntity(@Nullable Entity entityIn, AxisAlignedBB boundingBox, @Nullable Predicate <? super Entity > predicate)
+    {
+        List<Entity> list = Lists.newArrayList();
+        this.getEntitiesInAABBexcludingInner(entityIn, boundingBox, predicate,
+                chunk -> chunk.getHardHitBoxEntitiesWithinAABBForEntity(entityIn, boundingBox, list, predicate)
+        );
+        return list;
+    }
+
     public <T extends Entity> List<T> getEntities(Class <? extends T > entityType, Predicate <? super T > filter)
     {
         List<T> list = Lists.newArrayList();
@@ -2785,6 +2994,12 @@
 
     public void checkSessionLock() throws SessionLockException
     {
+        // TISCM merged session lock check
+        if (this.skipSessionLockCheck)
+        {
+            return;
+        }
+
         this.saveHandler.checkSessionLock();
     }
 
@@ -3066,6 +3281,7 @@
 
                 if (iblockstate.getBlock() == Blocks.COMPARATOR)
                 {
+                    onComparatorUpdate(blockpos);
                     iblockstate.neighborChanged(this, blockpos, blockIn, pos);
                 }
                 else if (iblockstate.isNormalCube())
@@ -3075,6 +3291,7 @@
 
                     if (iblockstate.getBlock() == Blocks.COMPARATOR)
                     {
+                        onComparatorUpdate(blockpos);
                         iblockstate.neighborChanged(this, blockpos, blockIn, pos);
                     }
                 }
@@ -3204,4 +3421,37 @@
     public abstract RecipeManager getRecipeManager();
 
     public abstract NetworkTagManager getTags();
+    
+    // [CM] added override for createShapecaster
+    @Override
+    public ocd.mcoptimizations.shapecast.IShapecaster createShapecaster(@Nullable final Entity entity, final Set<Entity> ignoredEntities, final AxisAlignedBB box, @Nullable final Predicate<VoxelShape> filter)
+    {
+        final ocd.mcoptimizations.shapecast.IShapecaster shapecaster = IWorld.super.createShapecaster(entity, ignoredEntities, box, filter);
+        
+        if (entity == null)
+            return shapecaster;
+        
+        return ocd.mcoptimizations.shapecast.IShapecaster.combine(IEntityReader.super.createShapecaster(entity, ignoredEntities, box, filter), shapecaster);
+    }
+    // [CM] end
+
+    // RSMM
+    public void onBlockUpdate(BlockPos pos, IBlockState state) {
+        
+    }
+
+    // RSMM
+    public void onComparatorUpdate(BlockPos pos) {
+        
+    }
+
+    // RSMM
+    public void onEntityTick(Entity entity) {
+        
+    }
+
+    // RSMM
+    public void onBlockEntityTick(TileEntity blockEntity) {
+        
+    }
 }
