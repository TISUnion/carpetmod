--- a/net/minecraft/world/gen/ChunkProviderServer.java
+++ b/net/minecraft/world/gen/ChunkProviderServer.java
@@ -1,5 +1,17 @@
 package net.minecraft.world.gen;
 
+import carpet.commands.ChunkRegenCommand;
+import carpet.helpers.BedrockBreakingStatHelper;
+import carpet.logging.LoggerRegistry;
+import carpet.logging.logHelpers.AutoSaveLogHelper;
+import carpet.logging.threadstone.ChunkLoadingCacheStatistic;
+import carpet.logging.threadstone.ThreadstoneLogger;
+import carpet.settings.CarpetSettings;
+import carpet.utils.Messenger;
+import carpet.utils.TISCMConfig;
+import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMaps;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
@@ -8,7 +20,8 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicReferenceArray;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
@@ -42,11 +55,22 @@
     private final IChunkLoader chunkLoader;
     private final Long2ObjectMap<Chunk> loadedChunks = Long2ObjectMaps.synchronize(new ChunkCacheNeighborNotification(8192));
     private Chunk lastAccessed;
+    private final AtomicReferenceArray<Chunk> chunkCache = new AtomicReferenceArray<>(256); // [CM] Chunk cache
     private final ProtoChunkScheduler chunkScheduler;
     private final TaskManager<ChunkPos, ChunkStatus, ChunkPrimer> taskManager;
     private final WorldServer world;
     private final IThreadListener mainThread;
 
+    // TISCM multi-threading chunk saving
+    private static final ThreadPoolExecutor CHUNK_SAVING_THREAD_POOL = TISCMConfig.MULTI_THREAD_CHUNK_SAVING ?
+            new ThreadPoolExecutor(
+                    0, Runtime.getRuntime().availableProcessors(), 3, TimeUnit.SECONDS,
+                    new LinkedBlockingQueue<>(), new ThreadFactoryBuilder().setNameFormat("ChunkSaver %d").build()
+            ) : null;
+
+    // TISCM threadstone logger
+    public final ChunkLoadingCacheStatistic chunkLoadingCacheStatistic = new ChunkLoadingCacheStatistic();
+
     public ChunkProviderServer(WorldServer worldIn, IChunkLoader chunkLoaderIn, IChunkGenerator<?> chunkGeneratorIn, IThreadListener threadListener)
     {
         this.world = worldIn;
@@ -86,15 +110,26 @@
     @Nullable
     public Chunk getChunk(int x, int z, boolean load, boolean generate)
     {
+        // [CM] Chunk cache
+        if (CarpetSettings.chunkCache)
+            return provideChunk_new(x, z, load, generate);
+        // [CM] End
+        
         Chunk chunk;
 
         synchronized (this.chunkLoader)
         {
             if (this.lastAccessed != null && this.lastAccessed.getPos().x == x && this.lastAccessed.getPos().z == z)
             {
+                // TISCM threadstone logger
+                this.chunkLoadingCacheStatistic.onLRUHit();
+
                 return this.lastAccessed;
             }
 
+            // TISCM threadstone logger
+            this.chunkLoadingCacheStatistic.onLRUMissed();
+
             long i = ChunkPos.asLong(x, z);
             chunk = this.loadedChunks.get(i);
 
@@ -106,6 +141,10 @@
 
             if (load)
             {
+                boolean logBeacons = LoggerRegistry.__threadstone;
+                if (logBeacons && ThreadstoneLogger.isCurrentThreadAsync(world)) {
+                    ThreadstoneLogger.getInstance().onAsyncLoadChunk(x, z);
+                }
                 try
                 {
                     chunk = this.chunkLoader.loadChunk(this.world, x, z, (p_212471_3_) ->
@@ -215,9 +254,20 @@
             }
 
             this.loadedChunks.put(k, chunk);
-            this.lastAccessed = chunk;
+            // this.lastAccessed = chunk; [CM] if else wrap
+            if (CarpetSettings.chunkCache)
+            {
+                this.chunkCache.lazySet(getChunkIndex(i, j), chunk);
+            }
+            else
+            {
+                this.lastAccessed = chunk;
+            }
         }
 
+        // TISCM chunk regen command
+        ChunkRegenCommand.onChunkGenerated(this.world.dimension.getType(), i, j);
+
         this.mainThread.addScheduledTask(chunk::onLoad);
         return chunk;
     }
@@ -241,6 +291,9 @@
 
     public boolean saveChunks(boolean all)
     {
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+            this.world.getLightingEngine().procLightUpdates();
         int i = 0;
         this.chunkScheduler.save(() ->
         {
@@ -249,22 +302,93 @@
 
         synchronized (this.chunkLoader)
         {
-            for (Chunk chunk : this.loadedChunks.values())
+            // TISCM merged session lock check
+            if (TISCMConfig.MERGED_SESSION_LOCK_CHECK)
             {
-                if (chunk.needsSaving(all))
+                try
                 {
-                    this.saveChunkData(chunk);
-                    chunk.setModified(false);
-                    ++i;
+                    this.world.checkSessionLock();
+                    this.world.skipSessionLockCheck = true;
+                }
+                catch (SessionLockException ignored)
+                {
+                }
+            }
+            // TISCM merged session lock check try-catch
+            try {
 
-                    if (i == 24 && !all)
+            // TISCM multi-threading chunk saving
+            if (TISCMConfig.MULTI_THREAD_CHUNK_SAVING)
+            {
+                List<Pair<ChunkPos, Future<?>>> futures = Lists.newArrayList();
+                for (Chunk chunk : this.loadedChunks.values())
+                {
+                    if (chunk.needsSaving(all))
                     {
-                        return false;
+                        futures.add(Pair.of(
+                                chunk.getPos(), CHUNK_SAVING_THREAD_POOL.submit(() -> {
+                                    this.saveChunkData(chunk);
+                                    chunk.setModified(false);
+                                })
+                        ));
+
+                        ++i;
+
+                        if (i == 24 && !all)
+                        {
+                            break;
+                        }
                     }
                 }
+                for (Pair<ChunkPos, Future<?>> pair : futures)
+                {
+                    try
+                    {
+                        pair.getSecond().get();
+                    }
+                    catch (Exception e)
+                    {
+                        LOGGER.error("[TISCM MULTI_THREAD_CHUNK_SAVING] Failed to saved chunk {}: {}", pair.getFirst(), e);
+                        throw new RuntimeException("Failed to save chunk " + pair.getFirst(), e);
+                    }
+                }
+
+                if (i == 24 && !all)
+                {
+                    return false;
+                }
             }
+            else // vanilla
+            {
+                for (Chunk chunk : this.loadedChunks.values())
+                {
+                    if (chunk.needsSaving(all))
+                    {
+                        this.saveChunkData(chunk);
+                        chunk.setModified(false);
+                        ++i;
 
+                        if (i == 24 && !all)
+                        {
+                            return false;
+                        }
+                    }
+                }
+            }
+
+            // TISCM autosave logger
+            AutoSaveLogHelper.savedChunkCounter += i;
+
+            // TISCM debug AUTO_SAVE_TIME_COST_DISPLAY
+            if (TISCMConfig.AUTO_SAVE_TIME_COST_DISPLAY && i > 0)
+            {
+                Messenger.print_server_message(this.world.getServer(), String.format("%s saved %d chunks", this.world.getDimension().getType(), i));
+            }
+
             return true;
+
+            // TISCM merged session lock check try-catch
+            } finally {this.world.skipSessionLockCheck = false;}
         }
     }
 
@@ -306,10 +430,24 @@
 
                         if (chunk != null)
                         {
+                            // TISCM break_bedrock stat
+                            BedrockBreakingStatHelper.onChunkUnload(this.world, chunk);
+
                             chunk.onUnload();
                             this.saveChunkData(chunk);
                             this.loadedChunks.remove(olong);
-                            this.lastAccessed = null;
+                            // this.lastAccessed = null; [CM] Chunk cache - if else wrap
+                            if (CarpetSettings.chunkCache)
+                            {
+                                final int cacheIndex = getChunkIndex(chunk.x, chunk.z);
+                                final Chunk cachedChunk = this.chunkCache.get(cacheIndex);
+                                if (cachedChunk == chunk)
+                                    this.chunkCache.lazySet(cacheIndex, null);
+                            }
+                            else
+                            {
+                                this.lastAccessed = null;
+                            }
                             ++i;
                         }
                     }
@@ -360,6 +498,99 @@
 
     public boolean chunkExists(int x, int z)
     {
+        // [CM] Chunk cache
+        if (CarpetSettings.chunkCache)
+        {
+            int index = getChunkIndex(x, z);
+            Chunk chunk = this.chunkCache.get(index);
+            if (chunk != null && chunk.getPos().x == x && chunk.getPos().z == z)
+            {
+                return true;
+            }
+            chunk = this.loadedChunks.get(ChunkPos.asLong(x, z));
+            if (chunk != null)
+            {
+                this.chunkCache.lazySet(index, chunk);
+                return true;
+            }
+            return false;
+        }
+        // [CM] End
         return this.loadedChunks.containsKey(ChunkPos.asLong(x, z));
     }
+
+    // [CM] Chunk cache
+    private static int getChunkIndex(int x, int z)
+    {
+        return ((x & 15) << 4) | (z & 15);
+    }
+    
+    @Nullable
+    public Chunk provideChunk_new(int x, int z, boolean load, boolean generate)
+    {
+        Chunk chunk = this.chunkCache.get(getChunkIndex(x, z));
+        
+        if (chunk != null && chunk.getPos().x == x && chunk.getPos().z == z)
+        {
+            return chunk;
+        }
+        
+        synchronized (this.chunkLoader)
+        {
+            
+            long i = ChunkPos.asLong(x, z);
+            chunk = this.loadedChunks.get(i);
+            
+            if (chunk != null)
+            {
+                this.chunkCache.lazySet(getChunkIndex(x, z), chunk);
+                return chunk;
+            }
+
+            if (load)
+            {
+                try
+                {
+                    chunk = this.chunkLoader.loadChunk(this.world, x, z, (p_212471_3_) -> {
+                        p_212471_3_.setLastSaveTime(this.world.getGameTime());
+                        this.loadedChunks.put(ChunkPos.asLong(x, z), p_212471_3_);
+                    });
+                }
+                catch (Exception exception)
+                {
+                    LOGGER.error("Couldn't load chunk", (Throwable) exception);
+                }
+            }
+        }
+        
+        if (chunk != null)
+        {
+            this.mainThread.addScheduledTask(chunk::onLoad);
+            return chunk;
+        }
+        else if (generate)
+        {
+            try
+            {
+                this.taskManager.startBatch();
+                this.taskManager.addToBatch(new ChunkPos(x, z));
+                CompletableFuture<ChunkPrimer> completablefuture = this.taskManager.finishBatch();
+                return completablefuture.thenApply(this::convertToChunk).join();
+            }
+            catch (RuntimeException runtimeexception)
+            {
+                throw this.makeReportedException(x, z, runtimeexception);
+            }
+        }
+        else
+        {
+            return null;
+        }
+    }
+
+    // TISCM /info container command added getter
+    public Long2ObjectMap<Chunk> getLoadedChunks$TISCM()
+    {
+        return this.loadedChunks;
+    }
 }
