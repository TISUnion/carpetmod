--- a/net/minecraft/world/chunk/Chunk.java
+++ b/net/minecraft/world/chunk/Chunk.java
@@ -1,11 +1,5 @@
 package net.minecraft.world.chunk;
 
-import com.google.common.collect.Maps;
-import com.google.common.collect.Queues;
-import com.google.common.collect.Sets;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
-import it.unimi.dsi.fastutil.shorts.ShortList;
 import java.util.BitSet;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -15,7 +9,35 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Predicate;
+
 import javax.annotation.Nullable;
+
+import carpet.helpers.PushableEntityPredicateWrapper;
+import net.minecraft.entity.EntityLivingBase;
+import net.minecraft.entity.item.EntityArmorStand;
+import net.minecraft.entity.item.EntityBoat;
+import net.minecraft.entity.item.EntityMinecart;
+import net.minecraft.entity.passive.EntityBat;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
+import com.google.common.collect.Sets;
+
+//TISCM: add chunk debug
+import carpet.logging.LoggerRegistry;
+import carpet.logging.logHelpers.ChunkLogHelper;
+import carpet.settings.CarpetSettings;
+import carpet.utils.LightInitHooks;
+import carpet.utils.LightingHooks;
+import carpet.utils.portalsearcher.PortalSearcherAbstract;
+import carpet.utils.portalsearcher.SuperCacheHandler;
+import carpet.worldedit.internal.ExtendedChunk;
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.shorts.ShortList;
 import net.minecraft.block.Block;
 import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.block.state.IBlockState;
@@ -23,6 +45,7 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.monster.EntityShulker;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.IFluidState;
@@ -30,6 +53,7 @@
 import net.minecraft.init.Fluids;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.PacketBuffer;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.ClassInheritanceMultiMap;
 import net.minecraft.util.EnumFacing;
@@ -43,6 +67,7 @@
 import net.minecraft.world.EnumLightType;
 import net.minecraft.world.ITickList;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldType;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.chunk.storage.AnvilChunkLoader;
@@ -52,10 +77,8 @@
 import net.minecraft.world.gen.feature.structure.StructureStart;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
-public class Chunk implements IChunk
+public class Chunk implements IChunk, /* CM worldedit */ ExtendedChunk
 {
     private static final Logger LOGGER = LogManager.getLogger();
     public static final ChunkSection EMPTY_SECTION = null;
@@ -89,7 +112,30 @@
     private int neighborCount;
     private final AtomicInteger field_205757_F = new AtomicInteger();
     private final ChunkPos field_212816_F;
+    
+    // [TISCM] Newlight - Start
+    private int neighborLoaded;
+    
+    private int[] neighborLightChecks = null;
+    private int[] lightTrackings = null;
+    private int[] neighborLightTrackings = null;
+    
+    private boolean pendingBoundaryChecks;
+    private short pendingNeighborLightInits;
+    
+    private boolean isLightPopulated;
+    // [TISCM] Newlight - End
 
+    // TISCM optimizedHardHitBoxEntityCollision
+    // an array like field entityLists but only stores entities with getCollisionBoundingBox() != null
+    private final ClassInheritanceMultiMap<Entity>[] hardHitBoxEntityLists;
+    private final boolean optimizedHardHitBoxEntityCollisionEnabled;
+
+    // TISCM optimizedPushableEntityCollision
+    // an array like field entityLists but only stores entities with possibly canBePushed() != false
+    private final ClassInheritanceMultiMap<Entity>[] pushableEntityLists;
+    private final boolean optimizedPushableEntityCollisionEnabled;
+
     @OnlyIn(Dist.CLIENT)
     public Chunk(World worldIn, int cx, int cz, Biome[] biomesIn)
     {
@@ -99,6 +145,17 @@
     public Chunk(World worldIn, int cx, int cz, Biome[] biomesIn, UpgradeData upgradeDataIn, ITickList<Block> blocksToBeTickedIn, ITickList<Fluid> fluidsToBeTickedIn, long inhabitedTimeIn)
     {
         this.entityLists = new ClassInheritanceMultiMap[16];
+
+        // TISCM optimizedHardHitBoxEntityCollision
+        this.hardHitBoxEntityLists = new ClassInheritanceMultiMap[this.entityLists.length];
+        this.optimizedHardHitBoxEntityCollisionEnabled = CarpetSettings.optimizedHardHitBoxEntityCollision;
+        // TISCM optimizedHardHitBoxEntityCollision ends
+
+        // TISCM optimizedPushableEntityCollision
+        this.pushableEntityLists = new ClassInheritanceMultiMap[this.entityLists.length];
+        this.optimizedPushableEntityCollisionEnabled = CarpetSettings.optimizedPushableEntityCollision;
+        // TISCM optimizedPushableEntityCollision ends
+
         this.world = worldIn;
         this.x = cx;
         this.z = cz;
@@ -116,6 +173,12 @@
         for (int i = 0; i < this.entityLists.length; ++i)
         {
             this.entityLists[i] = new ClassInheritanceMultiMap<>(Entity.class);
+
+            // TISCM optimizedHardHitBoxEntityCollision
+            this.hardHitBoxEntityLists[i] = new ClassInheritanceMultiMap<>(Entity.class);
+
+            // TISCM optimizedPushableEntityCollision
+            this.pushableEntityLists[i] = new ClassInheritanceMultiMap<>(Entity.class);
         }
 
         this.blockBiomeArray = biomesIn;
@@ -212,37 +275,45 @@
             {
                 if (this.world.dimension.hasSkyLight())
                 {
-                    int j = 15;
-                    int k = i + 16 - 1;
-
-                    while (true)
+                    // [TISCM] Newlight - if statement around
+                    if (CarpetSettings.newLight)
                     {
-                        int l = this.getBlockLightOpacity(i1, k, j1);
-
-                        if (l == 0 && j != 15)
+                        LightInitHooks.fillSkylightColumn(this, i1,  j1);
+                    }
+                    else
+                    {
+                        int j = 15;
+                        int k = i + 16 - 1;
+    
+                        while (true)
                         {
-                            l = 1;
-                        }
-
-                        j -= l;
-
-                        if (j > 0)
-                        {
-                            ChunkSection chunksection = this.sections[k >> 4];
-
-                            if (chunksection != EMPTY_SECTION)
+                            int l = this.getBlockLightOpacity(i1, k, j1);
+        
+                            if (l == 0 && j != 15)
                             {
-                                chunksection.setSkyLight(i1, k & 15, j1, j);
-                                this.world.notifyLightSet(new BlockPos((this.x << 4) + i1, k, (this.z << 4) + j1));
+                                l = 1;
                             }
+        
+                            j -= l;
+        
+                            if (j > 0)
+                            {
+                                ChunkSection chunksection = this.sections[k >> 4];
+            
+                                if (chunksection != EMPTY_SECTION)
+                                {
+                                    chunksection.setSkyLight(i1, k & 15, j1, j);
+                                    this.world.notifyLightSet(new BlockPos((this.x << 4) + i1, k, (this.z << 4) + j1));
+                                }
+                            }
+        
+                            --k;
+        
+                            if (k <= 0 || j <= 0)
+                            {
+                                break;
+                            }
                         }
-
-                        --k;
-
-                        if (k <= 0 || j <= 0)
-                        {
-                            break;
-                        }
                     }
                 }
             }
@@ -339,40 +410,52 @@
             int j = heightmap.getHeight(x & 15, z & 15);
             int k = this.x * 16 + x;
             int l = this.z * 16 + z;
-            this.world.markBlocksDirtyVertical(k, l, j, i);
+            // [TISCM] Newlight - if statement around
+            if (!CarpetSettings.newLight)
+            {
+                this.world.markBlocksDirtyVertical(k, l, j, i);
+            }
 
             if (this.world.dimension.hasSkyLight())
             {
-                int i1 = Math.min(i, j);
-                int j1 = Math.max(i, j);
-                int k1 = j < i ? 15 : 0;
-
-                for (int l1 = i1; l1 < j1; ++l1)
+                // [TISCM] Newlight - if statement around
+                if (CarpetSettings.newLight)
                 {
-                    ChunkSection chunksection = this.sections[l1 >> 4];
-
-                    if (chunksection != EMPTY_SECTION)
-                    {
-                        chunksection.setSkyLight(x, l1 & 15, z, k1);
-                        this.world.notifyLightSet(new BlockPos((this.x << 4) + x, l1, (this.z << 4) + z));
-                    }
+                    LightingHooks.relightSkylightColumn(this.world, this, x, z, i, j);
                 }
-
-                int l2 = 15;
-
-                while (j > 0 && l2 > 0)
+                else
                 {
-                    --j;
-                    int i3 = this.getBlockLightOpacity(x, j, z);
-                    i3 = i3 == 0 ? 1 : i3;
-                    l2 = l2 - i3;
-                    l2 = Math.max(0, l2);
-                    ChunkSection chunksection1 = this.sections[j >> 4];
-
-                    if (chunksection1 != EMPTY_SECTION)
+                    int i1 = Math.min(i, j);
+                    int j1 = Math.max(i, j);
+                    int k1 = j < i ? 15 : 0;
+    
+                    for (int l1 = i1; l1 < j1; ++l1)
                     {
-                        chunksection1.setSkyLight(x, j & 15, z, l2);
+                        ChunkSection chunksection = this.sections[l1 >> 4];
+        
+                        if (chunksection != EMPTY_SECTION)
+                        {
+                            chunksection.setSkyLight(x, l1 & 15, z, k1);
+                            this.world.notifyLightSet(new BlockPos((this.x << 4) + x, l1, (this.z << 4) + z));
+                        }
                     }
+    
+                    int l2 = 15;
+    
+                    while (j > 0 && l2 > 0)
+                    {
+                        --j;
+                        int i3 = this.getBlockLightOpacity(x, j, z);
+                        i3 = i3 == 0 ? 1 : i3;
+                        l2 = l2 - i3;
+                        l2 = Math.max(0, l2);
+                        ChunkSection chunksection1 = this.sections[j >> 4];
+        
+                        if (chunksection1 != EMPTY_SECTION)
+                        {
+                            chunksection1.setSkyLight(x, j & 15, z, l2);
+                        }
+                    }
                 }
             }
 
@@ -380,19 +463,23 @@
             {
                 this.heightMapMinimum = j;
             }
-
-            if (this.world.dimension.hasSkyLight())
+            
+            // [TISCM] Newlight - if statement around
+            if (!CarpetSettings.newLight)
             {
-                int i2 = heightmap.getHeight(x & 15, z & 15);
-                int j2 = Math.min(i, i2);
-                int k2 = Math.max(i, i2);
-
-                for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
+                if (this.world.dimension.hasSkyLight())
                 {
-                    this.updateSkylightNeighborHeight(k + enumfacing.getXOffset(), l + enumfacing.getZOffset(), j2, k2);
+                    int i2 = heightmap.getHeight(x & 15, z & 15);
+                    int j2 = Math.min(i, i2);
+                    int k2 = Math.max(i, i2);
+        
+                    for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
+                    {
+                        this.updateSkylightNeighborHeight(k + enumfacing.getXOffset(), l + enumfacing.getZOffset(), j2, k2);
+                    }
+        
+                    this.updateSkylightNeighborHeight(k, l, j2, k2);
                 }
-
-                this.updateSkylightNeighborHeight(k, l, j2, k2);
             }
 
             this.dirty = true;
@@ -489,9 +576,17 @@
         }
     }
 
+    // [CM] wrapper to add no update flag for vanilla invocation compatibility
     @Nullable
     public IBlockState setBlockState(BlockPos pos, IBlockState state, boolean isMoving)
     {
+        return setBlockState(pos, state, isMoving, false);
+    }
+
+    // [CM] added new parameter skipUpdates
+    @Nullable
+    public IBlockState setBlockState(BlockPos pos, IBlockState state, boolean isMoving, boolean skipUpdates$CM)
+    {
         int i = pos.getX() & 15;
         int j = pos.getY();
         int k = pos.getZ() & 15;
@@ -517,10 +612,16 @@
                 }
 
                 chunksection = new ChunkSection(j >> 4 << 4, this.world.dimension.hasSkyLight());
+                // [TISCM] Newlight
+                if (CarpetSettings.newLight)
+                    LightingHooks.initSkylightForSection(this.world, this, chunksection);
                 this.sections[j >> 4] = chunksection;
                 flag = j >= l;
             }
-
+            // [TISCM] Newlight
+            if (CarpetSettings.newLight)
+                flag = false;
+            
             chunksection.set(i, j & 15, k, state);
             this.heightMap.get(Heightmap.Type.MOTION_BLOCKING).update(i, j, k, state);
             this.heightMap.get(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES).update(i, j, k, state);
@@ -529,6 +630,11 @@
 
             if (!this.world.isRemote)
             {
+                // RSMM start
+                if (CarpetSettings.modRedstoneMultimeter) {
+                    ((WorldServer)world).getMultimeter().onBlockChange(world, pos, iblockstate, state);
+                }
+                // RSMM end
                 iblockstate.onReplaced(this.world, pos, state, isMoving);
             }
             else if (block1 != block && block1 instanceof ITileEntityProvider)
@@ -551,10 +657,14 @@
                     int i1 = state.getOpacity(this.world, pos);
                     int j1 = iblockstate.getOpacity(this.world, pos);
                     this.relightBlock(i, j, k, state);
-
-                    if (i1 != j1 && (i1 < j1 || this.getLightFor(EnumLightType.SKY, pos) > 0 || this.getLightFor(EnumLightType.BLOCK, pos) > 0))
+    
+                    // [TISCM] Newlight - if statement around
+                    if (!CarpetSettings.newLight)
                     {
-                        this.propagateSkylightOcclusion(i, k);
+                        if (i1 != j1 && (i1 < j1 || this.getLightFor(EnumLightType.SKY, pos) > 0 || this.getLightFor(EnumLightType.BLOCK, pos) > 0))
+                        {
+                            this.propagateSkylightOcclusion(i, k);
+                        }
                     }
                 }
 
@@ -570,12 +680,48 @@
 
                 if (!this.world.isRemote)
                 {
-                    state.onBlockAdded(this.world, pos, iblockstate);
+                    // CM worldedit logic
+                    boolean localShouldUpdate$worldedit;
+                    MinecraftServer server = world.getServer();
+                    if (server == null || Thread.currentThread() != server.getServerThread()) {
+                        // We're not on the server thread for some reason, WorldEdit will never be here
+                        // so we'll just ignore our flag
+                        localShouldUpdate$worldedit = true;
+                    } else {
+                        localShouldUpdate$worldedit = shouldUpdate$worldEdit;
+                    }
+                    // CM worldedit ends
+
+                    // there will be updates
+                    if (!skipUpdates$CM && localShouldUpdate$worldedit) // CM added support for placing without updates
+                    {
+                        state.onBlockAdded(this.world, pos, iblockstate);
+                    }
+                    // no update
+                    else
+                    {
+                        // TISCM portalSuperCache updating
+                        if (state.getBlock() == PortalSearcherAbstract.BLOCK_NETHER_PORTAL)
+                        {
+                            SuperCacheHandler.addPortal(this.world, pos);
+                        }
+                    }
                 }
 
                 if (block instanceof ITileEntityProvider)
                 {
-                    TileEntity tileentity1 = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    // [CM] Movable TE's CARPET-DeadlyMC
+                    TileEntity tileentity1; // = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+    
+                    // [CM] Movable TE's CARPET-DeadlyMC
+                    if(CarpetSettings.movableTileEntities)
+                    {  //this.getTileEntity(...) doesn't check pending TileEntities
+                        tileentity1 = this.world.getTileEntity(pos);
+                    }
+                    else
+                    { // vanilla
+                        tileentity1 = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    }
 
                     if (tileentity1 == null)
                     {
@@ -596,6 +742,9 @@
 
     public int getLightFor(EnumLightType type, BlockPos pos)
     {
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+            this.world.getLightingEngine().procLightUpdates(type);
         return this.getLight(type, pos, this.world.getDimension().hasSkyLight());
     }
 
@@ -651,10 +800,18 @@
                 {
                     return;
                 }
-
+    
                 chunksection = new ChunkSection(l << 4, hasSkylight);
                 this.sections[l] = chunksection;
-                this.generateSkylightMap();
+                // [TISCM] Newlight - if else statement around
+                if (!CarpetSettings.newLight)
+                {
+                    this.generateSkylightMap();
+                }
+                else
+                {
+                    LightingHooks.initSkylightForSection(this.world, this, chunksection);
+                }
             }
 
             if (light == EnumLightType.SKY)
@@ -680,6 +837,9 @@
 
     public int getLightSubtracted(BlockPos pos, int amount, boolean hasSkylight)
     {
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+            this.world.getLightingEngine().procLightUpdates();
         int i = pos.getX() & 15;
         int j = pos.getY();
         int k = pos.getZ() & 15;
@@ -742,6 +902,32 @@
         entityIn.chunkCoordY = k;
         entityIn.chunkCoordZ = this.z;
         this.entityLists[k].add(entityIn);
+
+        // TISCM optimizedHardHitBoxEntityCollision
+        if (this.optimizedHardHitBoxEntityCollisionEnabled)
+        {
+            // only shulker and boat, in vanilla
+            // For boat, getCollisionBox always returns not null
+            // For shulker, getCollisionBox returns not null if the shulker is alive, in case of edge cases there is an extra shulker check
+            if (entityIn.getCollisionBoundingBox() != null || entityIn instanceof EntityShulker)
+            {
+                this.hardHitBoxEntityLists[k].add(entityIn);
+            }
+        }
+
+        // TISCM optimizedPushableEntityCollision
+        if (this.optimizedPushableEntityCollisionEnabled)
+        {
+            // in vanilla only these types of entity may have canBePushed return true
+            if (entityIn instanceof EntityLivingBase || entityIn instanceof EntityMinecart || entityIn instanceof EntityBoat)
+            {
+                // bat and armor stand are special cases that cannot be pushed as EntityLivingBase
+                if (!(entityIn instanceof EntityBat) && !(entityIn instanceof EntityArmorStand))
+                {
+                    this.pushableEntityLists[k].add(entityIn);
+                }
+            }
+        }
     }
 
     public void setHeightmap(Heightmap.Type type, long[] data)
@@ -767,6 +953,18 @@
         }
 
         this.entityLists[index].remove(entityIn);
+
+        // TISCM optimizedHardHitBoxEntityCollision
+        if (this.optimizedHardHitBoxEntityCollisionEnabled)
+        {
+            this.hardHitBoxEntityLists[index].remove(entityIn);
+        }
+
+        // TISCM optimizedPushableEntityCollision
+        if (this.optimizedHardHitBoxEntityCollisionEnabled)
+        {
+            this.pushableEntityLists[index].remove(entityIn);
+        }
     }
 
     public boolean canSeeSky(BlockPos pos)
@@ -869,7 +1067,7 @@
         this.deferredTileEntities.put(new BlockPos(nbt.getInt("x"), nbt.getInt("y"), nbt.getInt("z")), nbt);
     }
 
-    public void removeTileEntity(BlockPos pos)
+    public void  removeTileEntity(BlockPos pos)
     {
         if (this.loaded)
         {
@@ -894,10 +1092,24 @@
                 return !(p_212383_0_ instanceof EntityPlayer);
             }));
         }
+   
+        //TISCM: chunk debug
+        if (LoggerRegistry.__chunkdebug){
+            ChunkLogHelper.onChunkNewState(this.getWorld(), this.x, this.z, "l Loaded");
+        }
+        
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+        {
+            LightingHooks.onLoadServer(this.world, this);
+        }
     }
 
     public void onUnload()
     {
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+            this.world.getLightingEngine().procLightUpdates();
         this.loaded = false;
 
         for (TileEntity tileentity : this.tileEntities.values())
@@ -907,8 +1119,38 @@
 
         for (ClassInheritanceMultiMap<Entity> classinheritancemultimap : this.entityLists)
         {
-            this.world.unloadEntities(classinheritancemultimap);
+            if (CarpetSettings.transDimensionInvisibleFix)
+            {
+                List<Entity> entityList = Lists.newArrayList();
+                for (Entity entity : classinheritancemultimap)
+                {
+                    // Dont unload player entities that do not belong to this chunk
+                    if (entity instanceof EntityPlayer)
+                    {
+                        if (entity.chunkCoordX != this.x || entity.chunkCoordZ != this.z)
+                        {
+                            continue;
+                        }
+                    }
+                    entityList.add(entity);
+                }
+                this.world.unloadEntities(entityList);
+            }
+            else
+            {
+                // vanilla
+                this.world.unloadEntities(classinheritancemultimap);
+            }
         }
+
+        //TISCM: chunk debug
+        if (LoggerRegistry.__chunkdebug){
+            ChunkLogHelper.onChunkNewState(this.getWorld(), this.x, this.z, "r Unloaded");
+        }
+        
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+            LightingHooks.onUnload(this.world, this);
     }
 
     public void markDirty()
@@ -916,7 +1158,8 @@
         this.dirty = true;
     }
 
-    public void getEntitiesWithinAABBForEntity(@Nullable Entity entityIn, AxisAlignedBB aabb, List<Entity> listToFill, Predicate <? super Entity > filter)
+    // TISCM optimizedHardHitBoxEntityCollision added parameter entityLists
+    private void getEntitiesWithinAABBForEntityInner(@Nullable Entity entityIn, AxisAlignedBB aabb, List<Entity> listToFill, Predicate <? super Entity > filter,  ClassInheritanceMultiMap<Entity>[] entityLists)
     {
         int i = MathHelper.floor((aabb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor((aabb.maxY + 2.0D) / 16.0D);
@@ -925,9 +1168,9 @@
 
         for (int k = i; k <= j; ++k)
         {
-            if (!this.entityLists[k].isEmpty())
+            if (!entityLists[k].isEmpty())
             {
-                for (Entity entity : this.entityLists[k])
+                for (Entity entity : entityLists[k])
                 {
                     if (entity.getBoundingBox().intersects(aabb) && entity != entityIn)
                     {
@@ -954,6 +1197,26 @@
         }
     }
 
+    // TISCM optimizedHardHitBoxEntityCollision preserves vanilla interface
+    public void getEntitiesWithinAABBForEntity(@Nullable Entity entityIn, AxisAlignedBB aabb, List<Entity> listToFill, Predicate <? super Entity > filter)
+    {
+        ClassInheritanceMultiMap<Entity>[] entityList = this.entityLists;
+        if (this.optimizedPushableEntityCollisionEnabled && CarpetSettings.optimizedPushableEntityCollision && filter instanceof PushableEntityPredicateWrapper)
+        {
+            entityList = this.pushableEntityLists;
+        }
+        getEntitiesWithinAABBForEntityInner(entityIn, aabb, listToFill, filter, entityList);
+    }
+
+    // TISCM optimizedHardHitBoxEntityCollision
+    public void getHardHitBoxEntitiesWithinAABBForEntity(@Nullable Entity entityIn, AxisAlignedBB aabb, List<Entity> listToFill, Predicate <? super Entity > filter)
+    {
+        ClassInheritanceMultiMap<Entity>[] entityList =
+                this.optimizedHardHitBoxEntityCollisionEnabled && CarpetSettings.optimizedHardHitBoxEntityCollision ?
+                        this.hardHitBoxEntityLists : this.entityLists;
+        getEntitiesWithinAABBForEntityInner(entityIn, aabb, listToFill, filter, entityList);
+    }
+
     public <T extends Entity> void getEntitiesOfTypeWithinAABB(Class <? extends T > entityClass, AxisAlignedBB aabb, List<T> listToFill, @Nullable Predicate <? super T > filter)
     {
         int i = MathHelper.floor((aabb.minY - 2.0D) / 16.0D);
@@ -997,6 +1260,9 @@
 
     public void tick(boolean skipRecheckGaps)
     {
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+            LightingHooks.onTick(this.world, this);
         if (this.isGapLightingUpdated && this.world.dimension.hasSkyLight() && !skipRecheckGaps)
         {
             this.recheckGaps(this.world.isRemote);
@@ -1138,9 +1404,28 @@
                 this.sections[l].recalculateRefCounts();
             }
         }
-
+        
+        // [TISCM] Newlight - start
+        long[] oldHeightMap = null;
+        if (CarpetSettings.newLight)
+        {
+            this.isLightPopulated = true;
+            
+            if (!fullChunk)
+            {
+                Heightmap map = this.getHeightmap(Heightmap.Type.LIGHT_BLOCKING);
+                oldHeightMap = new long[map.getDataArray().length];
+                System.arraycopy(map.getDataArray(), 0, oldHeightMap, 0, oldHeightMap.length);
+            }
+        }
+        // [TISCM] Newlight - end
+        
         this.generateHeightMap();
-
+        
+        // [TISCM] Newlight - start
+        if (CarpetSettings.newLight)
+            LightingHooks.relightSkylightColumns(this.world, this, oldHeightMap);
+        // [TISCM] Newlight - end
         for (TileEntity tileentity : this.tileEntities.values())
         {
             tileentity.updateContainingBlockInfo();
@@ -1165,6 +1450,12 @@
         this.queuedLightChecks = 0;
     }
 
+    // copied method for worldedit
+    public void resetRelightChecks$worldEdit()
+    {
+        this.queuedLightChecks = 0;
+    }
+
     public void enqueueRelightChecks()
     {
         if (this.queuedLightChecks < 4096)
@@ -1190,7 +1481,7 @@
 
                     if (this.sections[j] == EMPTY_SECTION && flag || this.sections[j] != EMPTY_SECTION && this.sections[j].get(k, i1, l).isAir())
                     {
-                        for (EnumFacing enumfacing : EnumFacing.values())
+                        for (EnumFacing enumfacing : (me.jellysquid.mods.lithium.LithiumConfig.ALLOC_ENUM_VALUES ? EnumFacing.ENUM_FACING_VALUES : EnumFacing.values()))
                         {
                             BlockPos blockpos2 = blockpos1.offset(enumfacing);
 
@@ -1497,4 +1788,67 @@
         QUEUED,
         CHECK;
     }
+    
+    // [TISCM] Newlight - getters and setters
+    public int[] getNeighborLightChecks() {
+        return this.neighborLightChecks;
+    }
+    public void setNeighborLightChecks(int[] in) {
+        this.neighborLightChecks = in;
+    }
+    
+    public int[] getLightTrackings() {
+        return this.lightTrackings;
+    }
+    public void setLightTrackings(int[] in) {
+        this.lightTrackings = in;
+    }
+    
+    public int[] getNeighborLightTrackings() {
+        return this.neighborLightTrackings;
+    }
+    public void setNeighborLightTrackings(int[] in) {
+        this.neighborLightTrackings = in;
+    }
+    
+    public int getNeighborsLoaded() {
+        return this.neighborLoaded;
+    }
+    public void setNeighborsLoaded(int in) {
+        this.neighborLoaded = in;
+    }
+    
+    public boolean getPendingBoundaryChecks() { return this.pendingBoundaryChecks; }
+    public void setPendingBoundaryChecks(boolean value) { this.pendingBoundaryChecks = value; }
+    
+    public short getPendingNeighborLightInits() {
+        return this.pendingNeighborLightInits;
+    }
+    public void setPendingNeighborLightInits(short in) {
+        this.pendingNeighborLightInits = in;
+    }
+    
+    public boolean getIsLightPopulated()
+    {
+        return this.isLightPopulated;
+    }
+    public void setIsLightPopulated(boolean value)
+    {
+        this.isLightPopulated = value;
+    }
+
+    // CM worldedit
+    private boolean shouldUpdate$worldEdit = true;
+
+    @Override
+    public IBlockState setBlockState$worldEdit(BlockPos pos, IBlockState state, boolean moved, boolean update) {
+        // save the state for the hook
+        shouldUpdate$worldEdit = update;
+        try {
+            return this.setBlockState(pos, state, moved);
+        } finally {
+            // restore natural mode
+            shouldUpdate$worldEdit = true;
+        }
+    }
 }
