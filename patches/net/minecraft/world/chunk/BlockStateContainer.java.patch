--- a/net/minecraft/world/chunk/BlockStateContainer.java
+++ b/net/minecraft/world/chunk/BlockStateContainer.java
@@ -5,6 +5,12 @@
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Function;
 import java.util.stream.Collectors;
+
+import carpet.logging.LoggerRegistry;
+import carpet.logging.threadstone.ThreadstoneLogger;
+import carpet.settings.CarpetSettings;
+import me.jellysquid.mods.lithium.LithiumConfig;
+import me.jellysquid.mods.lithium.common.world.chunk.LithiumHashPalette;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
@@ -44,7 +50,13 @@
             CrashReport crashreport = new CrashReport("Writing into PalettedContainer from multiple threads", new IllegalStateException());
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Thread dumps");
             crashreportcategory.addDetail("Thread dumps", s);
-            throw new ReportedException(crashreport);
+
+            // threadstone logger
+            ReportedException exception = new ReportedException(crashreport);
+            if (CarpetSettings.loggerThreadstone && LoggerRegistry.__threadstone) {
+                ThreadstoneLogger.getInstance().onConcurrentWriteCrash(exception);
+            }
+            throw exception;
         }
         else
         {
@@ -74,6 +86,13 @@
 
     private void setBits(int bitsIn)
     {
+        // Lithium chunk.palette
+        if (LithiumConfig.CHUNK_PALETTE)
+        {
+            this.setBits$lithium(bitsIn);
+            return;
+        }
+
         if (bitsIn != this.bits)
         {
             this.bits = bitsIn;
@@ -98,6 +117,27 @@
         }
     }
 
+    // Lithium chunk.palette
+    private void setBits$lithium(int size)
+    {
+        if (size != this.bits) {
+            this.bits = size;
+
+            if (this.bits <= 2) {
+                this.bits = 2;
+                this.palette = new BlockStatePaletteLinear<>(this.registry, this.bits, this, this.deserializer);
+            } else if (this.bits <= 8) {
+                this.palette = new LithiumHashPalette<>(this.registry, this.bits, this, this.deserializer, this.serializer);
+            } else {
+                this.palette = this.field_205521_b;
+                this.bits = MathHelper.log2DeBruijn(this.registry.size());
+            }
+
+            this.palette.idFor(this.defaultState);
+            this.storage = new BitArray(this.bits, 4096);
+        }
+    }
+
     public int onResize(int p_onResize_1_, T p_onResize_2_)
     {
         this.lock();
@@ -214,6 +254,13 @@
 
     public void writeChunkPalette(NBTTagCompound compound, String paletteName, String paletteDataName)
     {
+        // Lithium chunk.serialization
+        if (LithiumConfig.CHUNK_SERIALIZATION)
+        {
+            this.writeChunkPalette$lithium(compound, paletteName, paletteDataName);
+            return;
+        }
+
         this.lock();
         BlockStatePaletteHashMap<T> blockstatepalettehashmap = new BlockStatePaletteHashMap<>(this.registry, this.bits, this.field_205522_c, this.deserializer, this.serializer);
         blockstatepalettehashmap.idFor(this.defaultState);
@@ -243,4 +290,81 @@
     {
         return 1 + this.palette.getSerializedSize() + PacketBuffer.getVarIntSize(this.storage.size()) + this.storage.getBackingLongArray().length * 8;
     }
+
+    // Lithium chunk.serialization
+    // from Lithium 0.7.5
+    // https://github.com/CaffeineMC/lithium-fabric/tree/mc1.17.1-0.7.5/src/main/java/me/jellysquid/mods/lithium/mixin/chunk/serialization
+
+    private static final ThreadLocal<short[]> cachedCompactionArrays = ThreadLocal.withInitial(() -> new short[4096]);
+    private static final long[] EMPTY_PALETTE_DATA = new long[(4 * 4096) / 64];
+
+    public void writeChunkPalette$lithium(NBTTagCompound rootTag, String paletteKey, String dataKey) {
+        this.lock();
+
+        // The palette that will be serialized
+        LithiumHashPalette<T> palette = null;
+        long[] dataArray = null;
+
+        if (this.palette instanceof LithiumHashPalette) {
+            palette = ((LithiumHashPalette<T>) this.palette);
+
+            // The palette only contains the default block, so don't re-pack
+            if (palette.getSize() == 1 && palette.get(0) == this.defaultState) {
+                dataArray = EMPTY_PALETTE_DATA;
+            }
+        }
+
+        // If we aren't going to use an empty data array, start a compaction
+        if (dataArray == null) {
+            LithiumHashPalette<T> compactedPalette = new LithiumHashPalette<>(this.registry, this.bits, null, this.deserializer, this.serializer);
+
+            short[] array = cachedCompactionArrays.get();
+            this.storage.compact(this.palette, compactedPalette, array);
+
+            // If the palette didn't change during compaction, do a simple copy of the data array
+            if (palette != null && palette.getSize() == compactedPalette.getSize() && this.bits == Math.max(4, MathHelper.log2DeBruijn(palette.getSize()))) { // paletteSize can de-sync from palette - see https://github.com/CaffeineMC/lithium-fabric/issues/279
+                dataArray = this.storage.getBackingLongArray().clone();
+            } else {
+                // Re-pack the integer array as the palette has changed size
+                int size = Math.max(4, MathHelper.log2DeBruijn(compactedPalette.getSize()));
+                BitArray copy = new BitArray(size, 4096);
+
+                for (int i = 0; i < array.length; ++i) {
+                    copy.setAt(i, array[i]);
+                }
+
+                // We don't need to clone the data array as we are the sole owner of it
+                dataArray = copy.getBackingLongArray();
+                palette = compactedPalette;
+            }
+        }
+
+        NBTTagList paletteTag = new NBTTagList();
+        palette.toTag(paletteTag);
+
+        rootTag.put(paletteKey, paletteTag);
+        rootTag.putLongArray(dataKey, dataArray);
+
+        this.unlock();
+    }
+
+    // Lithium chunk.serialization ends
+
+    // TISCM palette command added getter
+    public IBlockStatePalette<T> getPalette()
+    {
+        return this.palette;
+    }
+
+    // TISCM palette command added getter
+    public BitArray getStorage()
+    {
+        return this.storage;
+    }
+
+    // TISCM palette command added getter
+    public int getBits()
+    {
+        return this.bits;
+    }
 }
