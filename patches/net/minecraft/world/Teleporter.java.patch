--- a/net/minecraft/world/Teleporter.java
+++ b/net/minecraft/world/Teleporter.java
@@ -1,5 +1,8 @@
 package net.minecraft.world;
 
+import carpet.logging.portalCache.PortalCacheLogger;
+import carpet.settings.CarpetSettings;
+import carpet.utils.portalsearcher.*;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
@@ -10,6 +13,7 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -22,6 +26,8 @@
     private final WorldServer world;
     private final Random random;
     private final Long2ObjectMap<Teleporter.PortalPosition> destinationCoordinateCache = new Long2ObjectOpenHashMap<>(4096);
+    //CM var portalCaching
+    private final Long2ObjectMap<Teleporter.PortalPosition> destinationHistoryCache = new Long2ObjectOpenHashMap<>(4096); //carpet mod
 
     public Teleporter(WorldServer worldIn)
     {
@@ -76,6 +82,7 @@
         int j = MathHelper.floor(entityIn.posX);
         int k = MathHelper.floor(entityIn.posZ);
         boolean flag = true;
+        boolean flag_cm = true; // CM portalCaching
         BlockPos blockpos = BlockPos.ORIGIN;
         long l = ChunkPos.asLong(j, k);
 
@@ -87,10 +94,34 @@
             teleporter$portalposition.lastUpdateTime = this.world.getGameTime();
             flag = false;
         }
-        else
+        else if (CarpetSettings.portalCaching && this.destinationHistoryCache.containsKey(l)) // potential best candidate for linkage.
         {
+            Teleporter.PortalPosition teleporter$portalposition_cm = (Teleporter.PortalPosition)this.destinationHistoryCache.get(l);
+            if (this.world.getBlockState(teleporter$portalposition_cm).getBlock() == Blocks.NETHER_PORTAL)
+            //just to verify nobody is cheating the system with update suppression
+            {
+                d0 = 0.0D;
+                blockpos = teleporter$portalposition_cm;
+                flag_cm = false;
+            }
+        }
+
+
+
+        //else portalCaching
+        if (d0 < 0.0D)
+        {
             BlockPos blockpos3 = new BlockPos(entityIn);
 
+            // begin TISCM portalSuperCache
+            if (CarpetSettings.portalSuperCache) {
+                PortalSearcherAbstract searcherAbstract = new PortalSearcherSuperCache(this.world);
+                PortalSearchResult result = searcherAbstract.search(blockpos3);
+                blockpos = result.getResult();
+                d0 = result.getDistanceSq();
+            } else {
+            // end TISCM portalSuperCache
+
             for (int i1 = -128; i1 <= 128; ++i1)
             {
                 BlockPos blockpos2;
@@ -119,6 +150,7 @@
                     }
                 }
             }
+            }
         }
 
         if (d0 >= 0.0D)
@@ -126,8 +158,20 @@
             if (flag)
             {
                 this.destinationCoordinateCache.put(l, new Teleporter.PortalPosition(blockpos, this.world.getGameTime()));
+
+                // TISCM portalCache logger
+                PortalCacheLogger.getInstance().onPortalCacheAdded(this.world, new ChunkPos(l), blockpos, this.world.getGameTime(), entityIn);
             }
 
+            /* carpet mod */
+            if (CarpetSettings.portalCaching)
+            {
+                //its timeless
+                this.destinationHistoryCache.put(l, new Teleporter.PortalPosition(blockpos, 0L));
+                this.destinationCoordinateCache.put(l, new Teleporter.PortalPosition(blockpos, this.world.getGameTime()));
+            }
+            /* carpet mod end */
+
             double d5 = (double)blockpos.getX() + 0.5D;
             double d7 = (double)blockpos.getZ() + 0.5D;
             BlockPattern.PatternHelper blockpattern$patternhelper = BLOCK_NETHER_PORTAL.createPatternHelper(this.world, blockpos);
@@ -139,14 +183,35 @@
             {
                 ++d2;
             }
-
+    
+            // [CM] portalSuffocationFix - removed offset calculation outside of the if statement
+            double offset = (1.0D - entityIn.getLastPortalVec().x) * (double)blockpattern$patternhelper.getWidth() * (double)blockpattern$patternhelper.getForwards().rotateY().getAxisDirection().getOffset();
+            if (CarpetSettings.portalSuffocationFix)
+            {
+                double entity_corrected_radius = 1.02*(double)entityIn.width/2;
+                if (entity_corrected_radius >= (double)blockpattern$patternhelper.getWidth()-entity_corrected_radius)
+                {
+                    //entity is wider than portal, so will suffocate anyways, so place it directly in the middle
+                    entity_corrected_radius = (double)blockpattern$patternhelper.getWidth()/2-0.001;
+                }
+        
+                if (offset >= 0)
+                {
+                    offset = MathHelper.clamp(offset, entity_corrected_radius, (double)blockpattern$patternhelper.getWidth()-entity_corrected_radius);
+                }
+                else
+                {
+                    offset = MathHelper.clamp(offset, -(double)blockpattern$patternhelper.getWidth()+entity_corrected_radius, -entity_corrected_radius);
+                }
+            }
+            
             if (blockpattern$patternhelper.getForwards().getAxis() == EnumFacing.Axis.X)
             {
-                d7 = d2 + (1.0D - entityIn.getLastPortalVec().x) * (double)blockpattern$patternhelper.getWidth() * (double)blockpattern$patternhelper.getForwards().rotateY().getAxisDirection().getOffset();
+                d7 = d2 + offset;
             }
             else
             {
-                d5 = d2 + (1.0D - entityIn.getLastPortalVec().x) * (double)blockpattern$patternhelper.getWidth() * (double)blockpattern$patternhelper.getForwards().rotateY().getAxisDirection().getOffset();
+                d5 = d2 + offset;
             }
 
             float f = 0.0F;
@@ -394,6 +459,13 @@
             }
         }
 
+        /* carpet mod */
+        if (CarpetSettings.portalCaching)
+        {
+            clearHistoryCache();
+        }
+        /* carpet mod */
+
         return true;
     }
 
@@ -402,20 +474,60 @@
         if (worldTime % 100L == 0L)
         {
             long i = worldTime - 300L;
-            ObjectIterator<Teleporter.PortalPosition> objectiterator = this.destinationCoordinateCache.values().iterator();
 
+            // TISCM portalCache logger
+//            ObjectIterator<Teleporter.PortalPosition> objectiterator = this.destinationCoordinateCache.values().iterator();
+//            while (objectiterator.hasNext())
+//            {
+//                Teleporter.PortalPosition teleporter$portalposition = objectiterator.next();
+            ObjectIterator<Long2ObjectMap.Entry<PortalPosition>> objectiterator = this.destinationCoordinateCache.long2ObjectEntrySet().iterator();
+
             while (objectiterator.hasNext())
             {
-                Teleporter.PortalPosition teleporter$portalposition = objectiterator.next();
+                Long2ObjectMap.Entry<PortalPosition> entry = objectiterator.next();
+                Teleporter.PortalPosition teleporter$portalposition = entry.getValue();
 
                 if (teleporter$portalposition == null || teleporter$portalposition.lastUpdateTime < i)
                 {
-                    objectiterator.remove();
+                    // TISCM portalCache logger
+	                if (teleporter$portalposition != null)
+	                {
+		                PortalCacheLogger.getInstance().onPortalCacheDeleted(this.world, new ChunkPos(entry.getLongKey()), teleporter$portalposition, teleporter$portalposition.lastUpdateTime, i);
+	                }
+
+	                objectiterator.remove();
                 }
             }
+            /* carpet mod */
+            //failsafe - arbitrary, but will never happen in normal circumstances,
+            //but who knows these freekin players.
+            if (CarpetSettings.portalCaching && this.destinationHistoryCache.size()> 65000 )
+            {
+                removeAllCachedEntries();
+            }
+            /* carpet mod end */
+            // begin TISCM portalSuperCache
+            if (!CarpetSettings.portalSuperCache) {
+                (this.world.getDimension().isNether() ? SuperCacheHandler.getHandlerNether() : SuperCacheHandler.getHandlerOverworld()).clear();
+            }
+            // end TISCM portalSuperCache
         }
     }
 
+    //carpet mod portalCaching
+    public void clearHistoryCache()
+    {
+        MinecraftServer minecraftserver = this.world.getServer();
+        minecraftserver.getWorlds().forEach( (w) -> w.getDefaultTeleporter().removeAllCachedEntries());
+    }
+
+    //carpet mod portalCaching
+    public void removeAllCachedEntries()
+    {
+        this.destinationHistoryCache.clear();
+    }
+
+
     public class PortalPosition extends BlockPos
     {
         public long lastUpdateTime;
