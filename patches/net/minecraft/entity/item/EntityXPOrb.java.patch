--- a/net/minecraft/entity/item/EntityXPOrb.java
+++ b/net/minecraft/entity/item/EntityXPOrb.java
@@ -1,5 +1,9 @@
 package net.minecraft.entity.item;
 
+import carpet.commands.lifetime.removal.LiteralRemovalReason;
+import carpet.commands.lifetime.removal.MobPickupRemovalReason;
+import carpet.helpers.CreativeNoClipHelper;
+import carpet.settings.CarpetSettings;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
@@ -17,11 +21,14 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
+import carpet.helpers.XPcombine;
+
 public class EntityXPOrb extends Entity
 {
     public int xpColor;
     public int xpOrbAge;
     public int delayBeforeCanPickup;
+    public int delayBeforeCombine;
     private int xpOrbHealth = 5;
     private int xpValue;
     private EntityPlayer closestPlayer;
@@ -37,8 +44,26 @@
         this.motionY = (double)((float)(Math.random() * 0.2D) * 2.0F);
         this.motionZ = (double)((float)(Math.random() * (double)0.2F - (double)0.1F) * 2.0F);
         this.xpValue = expValue;
+
+        // add combine delay [CM]
+        this.delayBeforeCombine = 50;
     }
 
+    public EntityXPOrb(World worldIn, int expValue, EntityXPOrb old)
+    {
+        super(EntityType.EXPERIENCE_ORB, worldIn);
+        this.setSize(0.5F, 0.5F);
+        this.setPosition(old.posX, old.posY, old.posZ);
+        this.rotationYaw = old.rotationYaw;
+        this.motionX = old.motionX;
+        this.motionY = old.motionY;
+        this.motionZ = old.motionZ;
+        this.xpValue = expValue;
+
+        // add combine delay [CM]
+        this.delayBeforeCombine = 50;
+    }
+
     public EntityXPOrb(World worldIn)
     {
         super(EntityType.EXPERIENCE_ORB, worldIn);
@@ -103,28 +128,46 @@
         }
 
         this.pushOutOfBlocks(this.posX, (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0D, this.posZ);
-        double d0 = 8.0D;
+        double d0 = CarpetSettings.xpTrackingDistance; // TISCM xpTrackingDistance
 
         if (this.xpTargetColor < this.xpColor - 20 + this.getEntityId() % 100)
         {
-            if (this.closestPlayer == null || this.closestPlayer.getDistanceSq(this) > 64.0D)
+            if (this.closestPlayer == null || this.closestPlayer.getDistanceSq(this) > d0 * d0)
             {
-                this.closestPlayer = this.world.getClosestPlayerToEntity(this, 8.0D);
+                // TISCM creativeNoClip extra
+                if (CarpetSettings.creativeNoClip)
+                {
+                    CreativeNoClipHelper.ignoreNoClipPlayersFlag.set(true);
+                }
+
+                this.closestPlayer = this.world.getClosestPlayerToEntity(this, d0);
+
+                // TISCM creativeNoClip extra
+                if (CarpetSettings.creativeNoClip)
+                {
+                    CreativeNoClipHelper.ignoreNoClipPlayersFlag.set(false);
+                }
             }
 
             this.xpTargetColor = this.xpColor;
         }
 
-        if (this.closestPlayer != null && this.closestPlayer.isSpectator())
+        if ((this.closestPlayer != null && this.closestPlayer.isSpectator()) || d0 == 0.0D) // TISCM xpTrackingDistance
         {
             this.closestPlayer = null;
         }
 
+        // TISCM creativeNoClip extra
+        if (this.closestPlayer != null && CreativeNoClipHelper.canEntityIgnoreClip(this.closestPlayer))
+        {
+            this.closestPlayer = null;
+        }
+
         if (this.closestPlayer != null)
         {
-            double d1 = (this.closestPlayer.posX - this.posX) / 8.0D;
-            double d2 = (this.closestPlayer.posY + (double)this.closestPlayer.getEyeHeight() / 2.0D - this.posY) / 8.0D;
-            double d3 = (this.closestPlayer.posZ - this.posZ) / 8.0D;
+            double d1 = (this.closestPlayer.posX - this.posX) / d0;
+            double d2 = (this.closestPlayer.posY + (double)this.closestPlayer.getEyeHeight() / 2.0D - this.posY) / d0;
+            double d3 = (this.closestPlayer.posZ - this.posZ) / d0;
             double d4 = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
             double d5 = 1.0D - d4;
 
@@ -138,6 +181,21 @@
         }
 
         this.move(MoverType.SELF, this.motionX, this.motionY, this.motionZ);
+
+        //Adding code here for combining XP orbs. [CM]
+        if (CarpetSettings.combineXPOrbs)
+        {
+            if (this.delayBeforeCombine > 0)
+            {
+                --this.delayBeforeCombine;
+            }
+
+            if (this.delayBeforeCombine == 0)
+            {
+                XPcombine.searchForOtherXPNearbyCarpet(this);
+            }
+        }
+
         float f = 0.98F;
 
         if (this.onGround)
@@ -159,6 +217,7 @@
 
         if (this.xpOrbAge >= 6000)
         {
+            this.recordRemoval(LiteralRemovalReason.DESPAWN_TIMEOUT);  // TISCM lifetime tracker
             this.remove();
         }
     }
@@ -193,6 +252,7 @@
 
             if (this.xpOrbHealth <= 0)
             {
+                this.setDeathDamageSource(source);  // TISCM lifetime tracker
                 this.remove();
             }
 
@@ -218,8 +278,11 @@
     {
         if (!this.world.isRemote)
         {
-            if (this.delayBeforeCanPickup == 0 && entityIn.xpCooldown == 0)
+            // [CM] added ORed condition
+            if (this.delayBeforeCanPickup == 0 && (entityIn.xpCooldown == 0 || CarpetSettings.xpNoCooldown))
             {
+                this.recordRemoval(new MobPickupRemovalReason(entityIn.getType()));  // TISCM lifetime tracker
+
                 entityIn.xpCooldown = 2;
                 entityIn.onItemPickup(this, 1);
                 ItemStack itemstack = EnchantmentHelper.getEnchantedItem(Enchantments.MENDING, entityIn);
@@ -251,6 +314,10 @@
         return xp * 2;
     }
 
+    public void setXpValue(int xpValue)
+    {
+        this.xpValue = xpValue;
+    }
     public int getXpValue()
     {
         return this.xpValue;
