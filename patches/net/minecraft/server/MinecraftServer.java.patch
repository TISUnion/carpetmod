--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1,5 +1,21 @@
 package net.minecraft.server;
 
+import carpet.CarpetServer;
+import carpet.commands.EpsCommand;
+import carpet.helpers.UpdateSuppressionException;
+import carpet.helpers.TickSpeed;
+import carpet.helpers.ServerMsptMetricsDataSyncer;
+import carpet.logging.logHelpers.AutoSaveLogHelper;
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.TickStage;
+import carpet.settings.CarpetSettings;
+import carpet.spark.CarpetSparkAccess;
+import carpet.utils.CarpetProfiler;
+import carpet.utils.Log4j2JndiPatch;
+import carpet.utils.Messenger;
+import carpet.utils.TISCMConfig;
+import carpet.utils.deobfuscator.StackTraceDeobfuscator;
+import carpet.worldedit.CarpetWorldEditAccess;
 import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -29,16 +45,7 @@
 import java.nio.charset.StandardCharsets;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.Map;
-import java.util.Queue;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
@@ -118,11 +125,15 @@
 import net.minecraft.world.storage.loot.LootTableManager;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import redstone.multimeter.common.TickTask;
+import redstone.multimeter.interfaces.MultimeterServerProvider;
+import redstone.multimeter.server.MultimeterServer;
+
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class MinecraftServer implements IThreadListener, ISnooperInfo, ICommandSource, Runnable
+public abstract class MinecraftServer implements IThreadListener, ISnooperInfo, ICommandSource, Runnable, MultimeterServerProvider /* RSMM */
 {
     private static final Logger LOGGER = LogManager.getLogger();
     public static final File USER_CACHE_FILE = new File("usercache.json");
@@ -178,6 +189,7 @@
     public final Queue < FutureTask<? >> futureTaskQueue = Queues.newConcurrentLinkedQueue();
     private Thread serverThread;
     private long serverTime = Util.milliTime();
+    public long actualServerTime = Util.milliTime();
     @OnlyIn(Dist.CLIENT)
     private boolean worldIconSet;
     private final IReloadableResourceManager resourceManager = new SimpleReloadableResourceManager(ResourcePackType.SERVER_DATA);
@@ -194,6 +206,7 @@
     private boolean whitelistEnabled;
     private boolean forceWorldUpgrade;
     private float tickTime;
+    protected final MultimeterServer multimeterServer; // RSMM
 
     public MinecraftServer(@Nullable File anvilFileIn, Proxy serverProxyIn, DataFixer dataFixerIn, Commands commandManagerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
@@ -212,6 +225,9 @@
         this.resourceManager.addReloadListener(this.lootTableManager);
         this.resourceManager.addReloadListener(this.functionManager);
         this.resourceManager.addReloadListener(this.advancementManager);
+        this.multimeterServer = new MultimeterServer(this); // RSMM
+        //CM
+        CarpetServer.init(this);
     }
 
     public abstract boolean init() throws IOException;
@@ -571,7 +587,13 @@
     public void stopServer()
     {
         LOGGER.info("Stopping server");
+        CarpetServer.onServerClosed(this);
 
+        // CM worldedit
+        CarpetWorldEditAccess.onStopServer(this);
+        // CM spark
+        CarpetSparkAccess.ServerLifecycleEvents_SERVER_STOPPING(this);
+
         if (this.getNetworkSystem() != null)
         {
             this.getNetworkSystem().terminateEndpoints();
@@ -639,34 +661,64 @@
     {
         try
         {
+            // CM worldedit
+            CarpetWorldEditAccess.onStartingServer(this);
+            // CM spark
+            CarpetSparkAccess.ServerLifecycleEvents_SERVER_STARTING(this);
+
             if (this.init())
             {
                 this.serverTime = Util.milliTime();
-                this.statusResponse.setServerDescription(new TextComponentString(this.motd));
+                // [CM] if statement around -- CustomMOTD
+                checkMOTD();
+                // [CM] End -- CustomMOTD
                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.13.2", 404));
                 this.applyServerIconToResponse(this.statusResponse);
 
-                while (this.serverRunning)
-                {
-                    long i = Util.milliTime() - this.serverTime;
+                // CM worldedit
+                CarpetWorldEditAccess.onStartServer(this);
 
-                    if (i > 2000L && this.serverTime - this.timeOfLastWarning >= 15000L)
+                while (this.serverRunning) {
+                    //TISCM EPS if statement
+                    if (!CarpetSettings.isEpsActive)
                     {
-                        long j = i / 50L;
-                        LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
-                        this.serverTime += j * 50L;
-                        this.timeOfLastWarning = this.serverTime;
-                    }
+                        /* carpet mod commandTick */
+                        //todo check if this check is necessary
+                        if (TickSpeed.time_warp_start_time != 0) {
+                            if (TickSpeed.continueWarp()) {
+                                this.tick(() -> true);
+                                this.serverTime = Util.milliTime();
+                                this.actualServerTime = Util.milliTime();
+                                this.serverIsRunning = true;
+                            }
+                            continue;
+                        }
+                        long i = Util.milliTime() - this.serverTime;
 
-                    this.tick(this::isAheadOfTime);
-                    this.serverTime += 50L;
+                        if (i > 2000L && this.serverTime - this.timeOfLastWarning >= 15000L) {
+                            long j = (long)(i / TickSpeed.mspt);//50L;
+                            LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+                            this.serverTime += (long)(j * TickSpeed.mspt);//50L;
+                            this.timeOfLastWarning = this.serverTime;
+                        }
 
-                    while (this.isAheadOfTime())
-                    {
-                        Thread.sleep(1L);
-                    }
+                        this.tick(this::isAheadOfTime);
+                        //[CM] NOTE: serverTime doesn't indicate current time, but server wannabe-time
+                        // only corrected if it falls behind more than 2000 and manages to catch the warning
+                        // which releases accrued time it falls behind, not 1 tick, but MULTIPLE ticks
+                        this.actualServerTime = Util.milliTime();
+                        this.serverTime += (long)TickSpeed.mspt;//50L;
 
-                    this.serverIsRunning = true;
+                        while (this.isAheadOfTime()) {
+                            Thread.sleep(1L);
+                        }
+
+                        this.serverIsRunning = true;
+                    }
+                    //TISCM EPS code
+                    else {
+                        EpsCommand.runTest(this);
+                    }
                 }
             }
             else
@@ -782,7 +834,18 @@
     {
         long i = Util.nanoTime();
         ++this.tickCounter;
+        //[CM]
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.start_tick_profiling();
+        }
+        // [CM end]
 
+        multimeterServer.tickStart(); // RSMM
+
+        // CM spark
+        CarpetSparkAccess.ServerTickEvents_START_SERVER_TICK(this);
+
         if (this.startProfiling)
         {
             this.startProfiling = false;
@@ -790,6 +853,11 @@
         }
 
         this.profiler.startSection("root");
+
+        CarpetProfiler.start_section(null, "Carpet");
+        CarpetServer.tick(this);
+        CarpetProfiler.end_current_section();
+
         this.updateTimeLightAndEntities(hasTimeLeft);
 
         if (i - this.nanoTimeSinceStatusRefresh >= 5000000000L)
@@ -810,10 +878,28 @@
 
         if (this.tickCounter % 900 == 0)
         {
+            CarpetProfiler.start_section(null, "Autosave");
+            MicroTimingLoggerManager.setTickStage(TickStage.AUTO_SAVE); // TISCM Micro Timing logger
+            startTickTask(TickTask.AUTOSAVE); // RSMM
+            long startTime = Util.nanoTime();
+            // TISCM autosave logger
+            AutoSaveLogHelper.savedChunkCounter = 0;
+
             this.profiler.startSection("save");
             this.playerList.saveAllPlayerData();
             this.saveAllWorlds(true);
             this.profiler.endSection();
+
+            long timeCost = Util.nanoTime() - startTime;
+            // TISCM debug AUTO_SAVE_TIME_COST_DISPLAY
+            if (TISCMConfig.AUTO_SAVE_TIME_COST_DISPLAY)
+            {
+                Messenger.print_server_message(this, String.format("Autosave took %.2fms", timeCost / 1e6));
+            }
+            // TISCM autosave logger
+            AutoSaveLogHelper.onAutoSave(this.getWorld(DimensionType.OVERWORLD).getGameTime(), timeCost);
+            CarpetProfiler.end_current_section();
+            endTickTask(); // RSMM
         }
 
         this.profiler.startSection("snooper");
@@ -829,16 +915,40 @@
         }
 
         this.profiler.endSection();
+        //CM scarpet events
+        CarpetServer.scriptServer.events.onTick();
+        //
         this.profiler.startSection("tallying");
         long l = this.tickTimeArray[this.tickCounter % 100] = Util.nanoTime() - i;
         this.tickTime = this.tickTime * 0.8F + (float)l / 1000000.0F * 0.19999999F;
         this.profiler.endSection();
         this.profiler.endSection();
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.end_tick_profiling(this);
+        }
+
+        // TISCM syncServerMsptMetricsData
+        if (CarpetSettings.syncServerMsptMetricsData)
+        {
+            ServerMsptMetricsDataSyncer.getInstance().broadcastSample(this.tickCounter, l);
+        }
+
+        // CM worldedit
+        CarpetWorldEditAccess.onEndServerTick(this);
+        // CM spark
+        CarpetSparkAccess.ServerTickEvents_END_SERVER_TICK(this);
+
+        multimeterServer.tickEnd(); // RSMM
     }
 
     public void updateTimeLightAndEntities(BooleanSupplier hasTimeLeft)
     {
         this.profiler.startSection("jobs");
+        CarpetProfiler.start_section(null, "Async Tasks");
+        MicroTimingLoggerManager.setTickStage(TickStage.ASYNC_TASK);  // TISCM Micro Timing logger
+        startTickTask(TickTask.TICK); // RSMM
+        startTickTask(TickTask.PACKETS); // RSMM
         FutureTask<?> futuretask;
 
         while ((futuretask = this.futureTaskQueue.poll()) != null)
@@ -847,8 +957,12 @@
         }
 
         this.profiler.endStartSection("commandFunctions");
+        CarpetProfiler.end_current_section();
+        MicroTimingLoggerManager.setTickStage(TickStage.COMMAND_FUNCTION); // TISCM Micro Timing logger
+        swapTickTask(TickTask.COMMAND_FUNCTIONS); // RSMM
         this.getFunctionManager().tick();
         this.profiler.endStartSection("levels");
+        swapTickTask(TickTask.LEVELS); // RSMM
 
         for (WorldServer worldserver : this.getWorlds())
         {
@@ -870,26 +984,52 @@
 
                 this.profiler.startSection("tick");
 
+                // Update suppression fix
                 try
                 {
                     worldserver.tick(hasTimeLeft);
                 }
                 catch (Throwable throwable1)
                 {
+                    if (CarpetSettings.deobfuscateCrashReportStackTrace)
+                    {
+                        StackTraceDeobfuscator.deobfuscateThrowableStackTrace(throwable1);
+                    }
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Exception ticking world");
                     worldserver.fillCrashReport(crashreport);
-                    throw new ReportedException(crashreport);
+                    Optional<UpdateSuppressionException> use = UpdateSuppressionException.extractInCauses(throwable1);
+                    if (CarpetSettings.yeetUpdateSuppressionCrash && use.isPresent()) {
+                        Messenger.print_server_message(this, "You just caused a server crash in world tick: " + use.get());
+                        LOGGER.error("Update Suppression in world tick", throwable1);
+                    }
+                    else {
+                        throw new ReportedException(crashreport);
+                    }
                 }
 
+                // Update suppression fix
                 try
                 {
+                    startTickTask(TickTask.ENTITIES); // RSMM
                     worldserver.tickEntities();
+                    endTickTask(); // RSMM
                 }
                 catch (Throwable throwable)
                 {
+                    if (CarpetSettings.deobfuscateCrashReportStackTrace)
+                    {
+                        StackTraceDeobfuscator.deobfuscateThrowableStackTrace(throwable);
+                    }
                     CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Exception ticking world entities");
                     worldserver.fillCrashReport(crashreport1);
-                    throw new ReportedException(crashreport1);
+                    Optional<UpdateSuppressionException> use = UpdateSuppressionException.extractInCauses(throwable);
+                    if (CarpetSettings.yeetUpdateSuppressionCrash && use.isPresent()) {
+                        Messenger.print_server_message(this, "You just caused a server crash in update entities: " + use.get());
+                        LOGGER.error("Update Suppression in world tick", throwable);
+                    }
+                    else {
+                        throw new ReportedException(crashreport1);
+                    }
                 }
 
                 this.profiler.endSection();
@@ -905,10 +1045,16 @@
             }))[this.tickCounter % 100] = Util.nanoTime() - i;
         }
 
+        CarpetProfiler.start_section(null, "Network");
+        MicroTimingLoggerManager.setTickStage(TickStage.NETWORK); // TISCM Micro Timing logger
+        swapTickTask(TickTask.CONNECTIONS); // RSMM
         this.profiler.endStartSection("connection");
         this.getNetworkSystem().tick();
+        swapTickTask(TickTask.PLAYER_PING); // RSMM
         this.profiler.endStartSection("players");
         this.playerList.tick();
+        CarpetProfiler.end_current_section();
+        swapTickTask(TickTask.SERVER_GUI); // RSMM
         this.profiler.endStartSection("tickables");
 
         for (int j = 0; j < this.tickables.size(); ++j)
@@ -917,6 +1063,8 @@
         }
 
         this.profiler.endSection();
+        endTickTask(); // RSMM
+        endTickTask(); // RSMM
     }
 
     public boolean getAllowNether()
@@ -929,6 +1077,12 @@
         this.tickables.add(tickable);
     }
 
+    static
+    {
+        // TISCM LOG4J2-3201 PATCH
+        Log4j2JndiPatch.patch();
+    }
+
     public static void main(String[] p_main_0_)
     {
         Bootstrap.register();
@@ -1004,6 +1158,11 @@
                 }
             }
 
+            // CM worldedit
+            CarpetWorldEditAccess.onInitialize();
+            // CM spark
+            CarpetSparkAccess.onInitialize();
+
             YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
@@ -1142,7 +1301,8 @@
 
     public String getServerModName()
     {
-        return "vanilla";
+        // return "vanilla";
+        return CarpetServer.MINECRAFT_BRAND;
     }
 
     public CrashReport addServerInfoToCrashReport(CrashReport report)
@@ -1605,6 +1765,12 @@
     {
         return this.serverTime;
     }
+    public void dontPanic()
+    {
+        this.serverTime = Util.milliTime();
+        this.actualServerTime = Util.milliTime();
+        this.serverIsRunning = true;
+    }
 
     public Thread getServerThread()
     {
@@ -1639,6 +1805,7 @@
         }
         else
         {
+            multimeterServer.getMultimeter().reloadOptions(); // RSMM
             this.getPlayerList().saveAllPlayerData();
             this.resourcePacks.reloadPacksFromFinders();
             this.loadDataPacks(this.getWorld(DimensionType.OVERWORLD).getWorldInfo());
@@ -1825,4 +1992,28 @@
             return 0;
         }
     }
+    public void checkMOTD()
+    {
+        if ("_".equals(CarpetSettings.customMOTD))
+            this.statusResponse.setServerDescription(new TextComponentString(this.motd));
+        else
+            this.statusResponse.setServerDescription(new TextComponentString(CarpetSettings.customMOTD));
+
+    }
+
+    // CM worldedit
+    public void watchDogTick$worldedit() {
+        serverTime = Util.milliTime();
+    }
+
+    // RSMM
+    @Override
+    public MultimeterServer getMultimeterServer() {
+        return multimeterServer;
+    }
+
+    // RSMM
+    public boolean isPaused() {
+        return false;
+    }
 }
