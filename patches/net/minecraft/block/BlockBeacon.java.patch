--- a/net/minecraft/block/BlockBeacon.java
+++ b/net/minecraft/block/BlockBeacon.java
@@ -1,10 +1,14 @@
 package net.minecraft.block;
 
+import carpet.logging.LoggerRegistry;
+import carpet.logging.threadstone.ThreadstoneLogger;
+import carpet.settings.CarpetSettings;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.item.ItemStack;
+import net.minecraft.state.properties.NoteBlockInstrument;
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityBeacon;
@@ -31,6 +35,17 @@
         return new TileEntityBeacon();
     }
 
+    @Override
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
+        Block block;
+        for (EnumFacing facing : EnumFacing.values()) {
+            block = worldIn.getBlockState(pos.offset(facing)).getBlock();
+            if (block == Blocks.REDSTONE_BLOCK) {
+                ThreadstoneLogger.getInstance().clear();
+            }
+        }
+    }
+
     public boolean onBlockActivated(IBlockState state, World worldIn, BlockPos pos, EntityPlayer player, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ)
     {
         if (worldIn.isRemote)
@@ -83,6 +98,17 @@
     {
         HttpUtil.DOWNLOADER_EXECUTOR.submit(() ->
         {
+            // TISCM threadstone logger logs beacons
+            boolean logBeacons = LoggerRegistry.__threadstone;
+            long initial = System.nanoTime();
+            if (logBeacons) {
+                ThreadstoneLogger.getInstance().submitGlassThreadCreation(glassPos);
+            }
+
+            // TISCM threadstone logger add try
+            try {
+
+            // vanilla logic starts
             Chunk chunk = worldIn.getChunk(glassPos);
 
             for (int i = glassPos.getY() - 1; i >= 0; --i)
@@ -111,7 +137,16 @@
                     });
                 }
             }
+            // vanilla logic ends
 
+            // TISCM threadstone logger logs beacons add catch-finally
+            } catch (Throwable throwable) {
+                ThreadstoneLogger.getInstance().onExceptionallyEndedAsyncThread(throwable);
+            } finally {
+                if (logBeacons) {
+                    ThreadstoneLogger.getInstance().submitGlassThreadTermination(glassPos, System.nanoTime() - initial);
+                }
+            }
         });
     }
 }
