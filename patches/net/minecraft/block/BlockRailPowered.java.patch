--- a/net/minecraft/block/BlockRailPowered.java
+++ b/net/minecraft/block/BlockRailPowered.java
@@ -1,6 +1,11 @@
 package net.minecraft.block;
 
+import carpet.helpers.UpdateSuppressionSimulator;
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.EventType;
+import carpet.settings.CarpetSettings;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.init.Blocks;
 import net.minecraft.state.BooleanProperty;
 import net.minecraft.state.EnumProperty;
 import net.minecraft.state.IProperty;
@@ -11,8 +16,9 @@
 import net.minecraft.util.Rotation;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
+import redstone.multimeter.block.MeterableBlock;
 
-public class BlockRailPowered extends BlockRailBase
+public class BlockRailPowered extends BlockRailBase implements MeterableBlock /*RSMM*/
 {
     public static final EnumProperty<RailShape> SHAPE = BlockStateProperties.RAIL_SHAPE_STRAIGHT;
     public static final BooleanProperty POWERED = BlockStateProperties.POWERED;
@@ -25,7 +31,8 @@
 
     protected boolean findPoweredRailSignal(World worldIn, BlockPos pos, IBlockState state, boolean p_176566_4_, int p_176566_5_)
     {
-        if (p_176566_5_ >= 8)
+        // [CM] Changed if statement values -- RailPowerLimit, defaults to 8
+        if (p_176566_5_ >= CarpetSettings.railPowerLimit-1)
         {
             return false;
         }
@@ -177,15 +184,29 @@
         boolean flag = state.get(POWERED);
         boolean flag1 = worldIn.isBlockPowered(pos) || this.findPoweredRailSignal(worldIn, pos, state, true, 0) || this.findPoweredRailSignal(worldIn, pos, state, false, 0);
 
+        logPowered(worldIn, pos, flag1); // RSMM
+
         if (flag1 != flag)
         {
+            // TISCM updateSuppressionSimulator
+            if (UpdateSuppressionSimulator.isActivated())
+            {
+                if (!flag1 && worldIn.getBlockState(pos.down()).getBlock() == Blocks.REDSTONE_ORE)
+                {
+                    UpdateSuppressionSimulator.kaboom();
+                }
+            }
+
             worldIn.setBlockState(pos, state.with(POWERED, Boolean.valueOf(flag1)), 3);
+            MicroTimingLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_START, "updateState");  // TISCM Micro Timing logger
+
             worldIn.notifyNeighborsOfStateChange(pos.down(), this);
 
             if (state.get(SHAPE).isAscending())
             {
                 worldIn.notifyNeighborsOfStateChange(pos.up(), this);
             }
+            MicroTimingLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_END, "updateState");  // TISCM Micro Timing logger
         }
     }
 
@@ -333,4 +354,22 @@
     {
         builder.add(SHAPE, POWERED);
     }
+
+    // RSMM
+    @Override
+    public boolean logPoweredOnBlockUpdate() {
+        return false;
+    }
+
+    // RSMM
+    @Override
+    public boolean isPowered(World world, BlockPos pos, IBlockState state) {
+        return world.isBlockPowered(pos) || findPoweredRailSignal(world, pos, state, true, 0) || findPoweredRailSignal(world, pos, state, false, 0);
+    }
+
+    // RSMM
+    @Override
+    public boolean isActive(World world, BlockPos pos, IBlockState state) {
+        return state.get(POWERED);
+    }
 }
