--- a/net/minecraft/block/Block.java
+++ b/net/minecraft/block/Block.java
@@ -1,11 +1,17 @@
 package net.minecraft.block;
 
+import carpet.commands.lifetime.spawning.LiteralSpawningReason;
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.BlockUpdateType;
+import carpet.logging.microtiming.enums.EventType;
 import it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap;
 import java.util.List;
 import java.util.Objects;
 import java.util.Random;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import me.jellysquid.mods.lithium.LithiumConfig;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.material.MaterialColor;
@@ -72,14 +78,17 @@
 import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import redstone.multimeter.interfaces.IBlock;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Block implements IItemProvider
+public class Block implements IItemProvider, IBlock /*RSMM*/
 {
     protected static final Logger LOGGER = LogManager.getLogger();
     public static final ObjectIntIdentityMap<IBlockState> BLOCK_STATE_IDS = new ObjectIntIdentityMap<>();
-    private static final EnumFacing[] UPDATE_ORDER = new EnumFacing[] {EnumFacing.WEST, EnumFacing.EAST, EnumFacing.NORTH, EnumFacing.SOUTH, EnumFacing.DOWN, EnumFacing.UP};
+    // TISCM Micro Timing logger makes public
+    public static final EnumFacing[] UPDATE_ORDER = new EnumFacing[] {EnumFacing.WEST, EnumFacing.EAST, EnumFacing.NORTH, EnumFacing.SOUTH, EnumFacing.DOWN, EnumFacing.UP};
     protected final int lightValue;
     protected final float blockHardness;
     protected final float blockResistance;
@@ -175,21 +184,42 @@
     @Deprecated
     public MaterialColor getMaterialColor(IBlockState state, IBlockReader worldIn, BlockPos pos)
     {
-        return this.materialColor;
+    	if (carpet.settings.CarpetSettings.stainedGlassNoMapRendering && state.getMaterial() == state.getMaterial().GLASS)
+    	{
+    		return this.materialColor.AIR;
+    	}
+    	return this.materialColor;
     }
 
     @Deprecated
     public void updateNeighbors(IBlockState stateIn, IWorld worldIn, BlockPos pos, int flags)
     {
+        if (carpet.settings.CarpetSettings.totallyNoBlockUpdate)
+        {
+            return;
+        }
+
         try (BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain())
         {
+            // TISCM Micro Timing logger
+            if (MicroTimingLoggerManager.isLoggerActivated())
+            {
+                MicroTimingLoggerManager.onBlockUpdate(worldIn.getWorld(), pos, worldIn.getBlockState(pos).getBlock(), BlockUpdateType.STATE_UPDATE, null, EventType.ACTION_START);
+            }
             for (EnumFacing enumfacing : UPDATE_ORDER)
             {
+
                 blockpos$pooledmutableblockpos.setPos(pos).move(enumfacing);
                 IBlockState iblockstate = worldIn.getBlockState(blockpos$pooledmutableblockpos);
                 IBlockState iblockstate1 = iblockstate.updatePostPlacement(enumfacing.getOpposite(), stateIn, worldIn, blockpos$pooledmutableblockpos, pos);
                 replaceBlock(iblockstate, iblockstate1, worldIn, blockpos$pooledmutableblockpos, flags);
+
             }
+            // TISCM Micro Timing logger
+            if (MicroTimingLoggerManager.isLoggerActivated())
+            {
+                MicroTimingLoggerManager.onBlockUpdate(worldIn.getWorld(), pos, worldIn.getBlockState(pos).getBlock(), BlockUpdateType.STATE_UPDATE, null, EventType.ACTION_END);
+            }
         }
     }
 
@@ -621,6 +651,10 @@
             double d2 = (double)(worldIn.rand.nextFloat() * 0.5F) + 0.25D;
             EntityItem entityitem = new EntityItem(worldIn, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, stack);
             entityitem.setDefaultPickupDelay();
+
+            // TISCM lifetime tracker
+            entityitem.recordSpawning(LiteralSpawningReason.BLOCK_DROP);
+
             worldIn.spawnEntity(entityitem);
         }
     }
@@ -1764,11 +1798,17 @@
             private final IBlockState adjacentState;
             private final EnumFacing side;
 
+            // Lithium cached_hashcode
+            private final int hash;
+
             public RenderSideCacheKey(IBlockState state, IBlockState adjacentState, EnumFacing side)
             {
                 this.state = state;
                 this.adjacentState = adjacentState;
                 this.side = side;
+
+                // Lithium cached_hashcode
+                this.hash = Objects.hash(this.state, this.adjacentState, this.side);
             }
 
             public boolean equals(Object p_equals_1_)
@@ -1790,7 +1830,8 @@
 
             public int hashCode()
             {
-                return Objects.hash(this.state, this.adjacentState, this.side);
+                // Lithium cached_hashcode
+                return LithiumConfig.CACHED_HASHCODE ? this.hash : Objects.hash(this.state, this.adjacentState, this.side);
             }
         }
 }
