--- a/net/minecraft/network/NetHandlerPlayServer.java
+++ b/net/minecraft/network/NetHandlerPlayServer.java
@@ -1,5 +1,15 @@
 package net.minecraft.network;
 
+import carpet.CarpetServer;
+import carpet.helpers.TickSpeed;
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.tickstages.PlayerEntityTickStageExtra;
+import carpet.network.CarpetClient;
+import carpet.network.CarpetServerNetworkHandler;
+import carpet.network.tiscm.TISCMProtocol;
+import carpet.network.tiscm.TISCMServerPacketHandler;
+import carpet.settings.CarpetSettings;
+import carpet.worldedit.CarpetWorldEditAccess;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
 import com.google.common.util.concurrent.Futures;
@@ -10,6 +20,8 @@
 import java.util.Collections;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import me.fallenbreath.lmspaster.LitematicaServerPasterAccess;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.BlockCommandBlock;
@@ -108,15 +120,7 @@
 import net.minecraft.tileentity.TileEntityCommandBlock;
 import net.minecraft.tileentity.TileEntitySign;
 import net.minecraft.tileentity.TileEntityStructure;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.ITickable;
-import net.minecraft.util.IntHashMap;
-import net.minecraft.util.NonNullList;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SharedConstants;
-import net.minecraft.util.StringUtils;
-import net.minecraft.util.Util;
+import net.minecraft.util.*;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.text.ChatType;
@@ -127,6 +131,8 @@
 import net.minecraft.world.GameType;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.dimension.DimensionType;
+import redstone.multimeter.common.network.PacketManager;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -177,6 +183,8 @@
 
     public void tick()
     {
+        MicroTimingLoggerManager.setTickStageExtra(new PlayerEntityTickStageExtra(this.player));  // TISCM Micro Timing logger
+
         this.captureCurrentPosition();
         this.player.playerTick();
         this.player.setPositionAndRotation(this.firstGoodX, this.firstGoodY, this.firstGoodZ, this.player.rotationYaw, this.player.rotationPitch);
@@ -185,7 +193,7 @@
 
         if (this.floating)
         {
-            if (++this.floatingTickCount > 80)
+            if (!CarpetSettings.antiCheatDisabled && ++this.floatingTickCount > 80)
             {
                 LOGGER.warn("{} was kicked for floating too long!", (Object)this.player.getName().getString());
                 this.disconnect(new TextComponentTranslation("multiplayer.disconnect.flying"));
@@ -211,7 +219,7 @@
 
             if (this.vehicleFloating && this.player.getLowestRidingEntity().getControllingPassenger() == this.player)
             {
-                if (++this.vehicleFloatingTickCount > 80)
+                if (!CarpetSettings.antiCheatDisabled && ++this.vehicleFloatingTickCount > 80)
                 {
                     LOGGER.warn("{} was kicked for floating a vehicle too long!", (Object)this.player.getName().getString());
                     this.disconnect(new TextComponentTranslation("multiplayer.disconnect.flying"));
@@ -265,6 +273,8 @@
         {
             this.disconnect(new TextComponentTranslation("multiplayer.disconnect.idling"));
         }
+
+        MicroTimingLoggerManager.setTickStageExtra(null);  // TISCM Micro Timing logger
     }
 
     public void captureCurrentPosition()
@@ -296,6 +306,12 @@
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.player.getServerWorld());
         this.player.setEntityActionState(packetIn.getStrafeSpeed(), packetIn.getForwardSpeed(), packetIn.isJumping(), packetIn.isSneaking());
+        //CM checking if player is moving, for commandTick
+        if (packetIn.getStrafeSpeed() != 0.0F || packetIn.getForwardSpeed() != 0.0F || packetIn.isJumping() || packetIn.isSneaking())
+        {
+            CarpetServer.scriptServer.events.onMountControls(player, packetIn.getStrafeSpeed(), packetIn.getForwardSpeed(), packetIn.isJumping(), packetIn.isSneaking());
+            TickSpeed.reset_player_active_timeout();
+        }
     }
 
     private static boolean isMovePlayerPacketInvalid(CPacketPlayer packetIn)
@@ -344,7 +360,7 @@
                 double d9 = entity.motionX * entity.motionX + entity.motionY * entity.motionY + entity.motionZ * entity.motionZ;
                 double d10 = d6 * d6 + d7 * d7 + d8 * d8;
 
-                if (d10 - d9 > 100.0D && (!this.server.isSinglePlayer() || !this.server.getServerOwner().equals(entity.getName().getString())))
+                if (d10 - d9 > 100.0D && (!CarpetSettings.antiCheatDisabled) && (!this.server.isSinglePlayer() || !this.server.getServerOwner().equals(entity.getName().getString())))
                 {
                     LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName().getString(), this.player.getName().getString(), d6, d7, d8);
                     this.netManager.sendPacket(new SPacketMoveVehicle(entity));
@@ -831,6 +847,12 @@
                         double d10 = this.player.motionX * this.player.motionX + this.player.motionY * this.player.motionY + this.player.motionZ * this.player.motionZ;
                         double d11 = d7 * d7 + d8 * d8 + d9 * d9;
 
+                        // [CM] for commandTick
+                        if (d11 > 0.0001D)
+                        {
+                            TickSpeed.reset_player_active_timeout();
+                        }
+
                         if (this.player.isPlayerSleeping())
                         {
                             if (d11 > 1.0D)
@@ -849,7 +871,8 @@
                                 i = 1;
                             }
 
-                            if (!this.player.isInvulnerableDimensionChange() && (!this.player.getServerWorld().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.isElytraFlying()))
+                            //[CM] Added AntiCheatSpeed
+                            if (!CarpetSettings.antiCheatDisabled && !this.player.isInvulnerableDimensionChange() && (!this.player.getServerWorld().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.isElytraFlying()))
                             {
                                 float f2 = this.player.isElytraFlying() ? 300.0F : 100.0F;
 
@@ -869,6 +892,8 @@
                             if (this.player.onGround && !packetIn.isOnGround() && d8 > 0.0D)
                             {
                                 this.player.jump();
+                                //CM
+                                CarpetServer.scriptServer.events.onPlayerJumped(player);
                             }
 
                             this.player.move(MoverType.PLAYER, d7, d8, d9);
@@ -992,6 +1017,16 @@
                 double d2 = this.player.posZ - ((double)blockpos.getZ() + 0.5D);
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
+                // CM worldedit
+                // just like net.fabricmc.fabric.mixin.event.interaction.MixinServerPlayerInteractionManager#startBlockBreak
+                EnumActionResult weResult = CarpetWorldEditAccess.onLeftClickBlock(this.player, worldserver, this.player.getActiveHand(), blockpos, packetIn.getFacing());
+                if (weResult != EnumActionResult.PASS)
+                {
+                    this.player.connection.sendPacket(new SPacketBlockChange(worldserver, blockpos)); // in case block changes on client-side
+                    return;
+                }
+                // CM worldedit ends
+
                 if (d3 > 36.0D)
                 {
                     return;
@@ -1006,6 +1041,9 @@
                     {
                         if (!this.server.isBlockProtected(worldserver, blockpos, this.player) && worldserver.getWorldBorder().contains(blockpos))
                         {
+                            // CM event hook
+                            CarpetServer.scriptServer.events.onBlockClicked(player, blockpos, packetIn.getFacing());
+                            //
                             this.player.interactionManager.startDestroyBlock(blockpos, packetIn.getFacing());
                         }
                         else
@@ -1052,6 +1090,8 @@
         {
             if (this.targetPos == null && this.player.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0D && !this.server.isBlockProtected(worldserver, blockpos, this.player) && worldserver.getWorldBorder().contains(blockpos))
             {
+                //CM
+                CarpetServer.scriptServer.events.onRightClickBlock(this.player, itemstack, enumhand, blockpos, enumfacing, new Vec3d( packetIn.getFacingX(), packetIn.getFacingY(), packetIn.getFacingZ()));
                 this.player.interactionManager.processRightClickBlock(this.player, worldserver, itemstack, enumhand, blockpos, enumfacing, packetIn.getFacingX(), packetIn.getFacingY(), packetIn.getFacingZ());
             }
         }
@@ -1073,6 +1113,9 @@
         ItemStack itemstack = this.player.getHeldItem(enumhand);
         this.player.markPlayerActive();
 
+        //CM
+        CarpetServer.scriptServer.events.onRightClick(player, itemstack, enumhand);
+
         if (!itemstack.isEmpty())
         {
             this.player.interactionManager.processRightClick(this.player, worldserver, itemstack, enumhand);
@@ -1121,6 +1164,9 @@
 
     public void onDisconnect(ITextComponent reason)
     {
+        // CM worldedit
+        CarpetWorldEditAccess.onPlayerDisconnect(this.player);
+
         LOGGER.info("{} lost connection: {}", this.player.getName().getString(), reason.getString());
         this.server.refreshStatusNextTick();
         this.server.getPlayerList().sendMessage((new TextComponentTranslation("multiplayer.player.left", this.player.getDisplayName())).applyTextStyle(TextFormatting.YELLOW));
@@ -1223,6 +1269,11 @@
 
             this.chatSpamThresholdCount += 20;
 
+            if (CarpetSettings.antiSpamDisabled)  // TISCM antiSpamDisabled
+            {
+                this.chatSpamThresholdCount = 0;
+            }
+
             if (this.chatSpamThresholdCount > 200 && !this.server.getPlayerList().canSendCommands(this.player.getGameProfile()))
             {
                 this.disconnect(new TextComponentTranslation("disconnect.spam"));
@@ -1250,19 +1301,25 @@
         switch (packetIn.getAction())
         {
             case START_SNEAKING:
+                CarpetServer.scriptServer.events.onStartSneaking(player);
                 this.player.setSneaking(true);
                 break;
             case STOP_SNEAKING:
+                CarpetServer.scriptServer.events.onStopSneaking(player);
                 this.player.setSneaking(false);
                 break;
             case START_SPRINTING:
+                CarpetServer.scriptServer.events.onStartSprinting(player);
                 this.player.setSprinting(true);
                 break;
             case STOP_SPRINTING:
+                CarpetServer.scriptServer.events.onStopSprinting(player);
                 this.player.setSprinting(false);
                 break;
             case STOP_SLEEPING:
 
+                CarpetServer.scriptServer.events.onOutOfBed(player);
+
                 if (this.player.isPlayerSleeping())
                 {
                     this.player.wakeUpPlayer(false, true, true);
@@ -1303,7 +1360,10 @@
                 break;
             case START_FALL_FLYING:
 
-                if (!this.player.onGround && this.player.motionY < 0.0D && !this.player.isElytraFlying() && !this.player.isInWater())
+                CarpetServer.scriptServer.events.onElytraDeploy(player);
+                
+                // [TISCM] Optimized elytra
+                if (!this.player.onGround && (CarpetSettings.elytraDeploymentFix || this.player.motionY < 0.0D) && !this.player.isElytraFlying() && !this.player.isInWater())
                 {
                     ItemStack itemstack = this.player.getItemStackFromSlot(EntityEquipmentSlot.CHEST);
 
@@ -1345,6 +1405,9 @@
                 if (packetIn.getAction() == CPacketUseEntity.Action.INTERACT)
                 {
                     EnumHand enumhand = packetIn.getHand();
+                    //
+                    CarpetServer.scriptServer.events.onEntityInteracted(player, entity, enumhand);
+                    //
                     this.player.interactOn(entity, enumhand);
                 }
                 else if (packetIn.getAction() == CPacketUseEntity.Action.INTERACT_AT)
@@ -1360,6 +1423,8 @@
                         this.server.logWarning("Player " + this.player.getName().getString() + " tried to attack an invalid entity");
                         return;
                     }
+                    //
+                    CarpetServer.scriptServer.events.onEntityAttacked(player, entity);
 
                     this.player.attackTargetEntityWithCurrentItem(entity);
                 }
@@ -1536,6 +1601,12 @@
             else if (flag && flag2 && this.itemDropThreshold < 200)
             {
                 this.itemDropThreshold += 20;
+
+                if (CarpetSettings.antiSpamDisabled)  // TISCM antiSpamDisabled
+                {
+                    this.itemDropThreshold = 0;
+                }
+
                 EntityItem entityitem = this.player.dropItem(itemstack, true);
 
                 if (entityitem != null)
@@ -1622,5 +1693,45 @@
 
     public void processCustomPayload(CPacketCustomPayload packetIn)
     {
+        // Carpet protocol
+        ResourceLocation channel = packetIn.getChannel();
+        if (CarpetClient.CARPET_CHANNEL.equals(channel))
+        {
+            CarpetServerNetworkHandler.handleData(packetIn.getData(), player);
+            return;
+        }
+
+        // TISCM protocol
+        if (CarpetSettings.tiscmNetworkProtocol && TISCMProtocol.CHANNEL.equals(channel))
+        {
+            TISCMServerPacketHandler.getInstance().dispatch(this, packetIn.getData());
+            return;
+        }
+
+        // RSMM start
+        if (PacketManager.getPacketChannelId().equals(channel)) {
+            PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, server);
+            server.getMultimeterServer().getPacketHandler().onPacketReceived(packetIn.getData(), player);
+            return;
+        }
+        // RSMM end
+
+        // CM worldedit CUI
+        CarpetWorldEditAccess.onCuiPacket(packetIn, player);
+
+        // Litematica server paster
+        LitematicaServerPasterAccess.onPacket(packetIn, player);
     }
+
+    // invoker added by litematica server paster
+    public void invokeExecuteCommand(String message)
+    {
+        this.handleSlashCommand(message);
+    }
+
+    // TISCM added getter
+    public MinecraftServer getServer()
+    {
+        return this.server;
+    }
 }
